<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="page_oot_config" kind="page">
    <compoundname>page_oot_config</compoundname>
    <title>Out-of-Tree Configuration</title>
    <detaileddescription>
<para>New as of 3.6.5.</para><para>Using gr_modtool, each package comes with the ability to easily locate the gnuradio-runtime library using the &apos;find_package(GnuradioRuntime)&apos; cmake command. This only locates the gnuradio-runtime library and include directory, which is enough for most simple projects.</para><para>As projects become more complicated and start needing to rely on other GNU Radio components like gnuradio-blocks or gnuradio-filter, for example, and when they become dependent on certain API compatibility versions of GNU Radio, we need something more. And so we have introduced the GnuradioConfig.cmake file.</para><para>When GNU Radio is installed, it also installs a GNU Radio-specific cmake config file that we can use for more advanced compatibility issues of our projects. This tool allows us to specific the API compatible version and a set of components that are required.</para><para>Taking the above example, say we have built against version 3.6.5 with features that were introduced in this version and we need the blocks and filter components as well as the main core library. We fist set a cmake variable GR_REQUIRED_COMPONENTS to the components we need. We then use the &apos;find_package&apos; command and also set a minimum required API compatible version. Since we are on the 3.6 API version, the minimum required version is &quot;3.6.5&quot;. The code in the CMakeLists.txt file would look like this:</para><para><programlisting><codeline><highlight class="normal">set(GR_REQUIRED_COMPONENTS<sp/>RUNTIME<sp/>BLOCKS<sp/>FILTER)</highlight></codeline>
<codeline><highlight class="normal">find_package(Gnuradio<sp/>3.6.5)</highlight></codeline>
</programlisting></para><para>Note that the capitalization is important on both lines.</para><para>If the installed version of GNU Radio is 3.6.4 or some other API version like 3.5 or 3.7, the Cmake configuration will fail with the version error. Likewise, if libgnuradio-filter was not installed as part of GNU Radio, the configuration will also fail.</para><sect1 id="page_oot_config_1oot_config_path_page">
<title>Install Path</title>
<para>Cmake has to know where to find either the package config files or the GnuradioConfig.cmake script. The package config files are located in $prefix/lib/pkgconfig while all of the Cmake scripts from GNU Radio are installed into $prefix/lib/cmake/gnuradio.</para><para>If the installed GNU Radio $prefix is &apos;/usr&apos; or &apos;/usr/local&apos;, then everything should work fine. If the GNU Radio install $prefix is something else, then Cmake must be told where to find it. This can be done in a few ways:</para><para><orderedlist>
<listitem><para>If you are installing the out-of-tree module into the same $prefix, then you would be setting &apos;-DCMAKE_INSTALL_PREFIX&apos; on the configuration command line. This is enough to tell Cmake where to look for the configuration files.</para></listitem><listitem><para>Cmake will try to find the package config (*.pc) files. If it can, these files will instruct Cmake where to look for the rest of the configuration options. If this is not set, it can be set as:</para></listitem></orderedlist>
</para><para><programlisting><codeline><highlight class="normal">export<sp/>PKG_CONFIG_PATH=$prefix/lib/pkgconfg:$PKG_CONFIG_PATH</highlight></codeline>
</programlisting></para><para><orderedlist>
<listitem><para>Set the CMAKE_PREFIX_PATH environmental variable to $prefix.</para></listitem></orderedlist>
</para><para><programlisting><codeline><highlight class="normal">export<sp/>CMAKE_PREFIX_PATH=$prefix:$CMAKE_PREFIX_PATH</highlight></codeline>
</programlisting></para><para>With method 1, you will be installing your OOT project into the same $prefix as GNU Radio. With methods 2 and 3, you can install your component anywhere you like (using -DCMAKE_INSTALL_PREFIX). </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
