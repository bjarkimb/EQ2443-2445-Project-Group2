<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgr_1_1uhd_1_1usrp__block" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>gr::uhd::usrp_block</compoundname>
    <basecompoundref refid="classgr_1_1sync__block" prot="public" virt="non-virtual">gr::sync_block</basecompoundref>
    <derivedcompoundref refid="classgr_1_1uhd_1_1usrp__sink" prot="public" virt="virtual">gr::uhd::usrp_sink</derivedcompoundref>
    <derivedcompoundref refid="classgr_1_1uhd_1_1usrp__source" prot="public" virt="virtual">gr::uhd::usrp_source</derivedcompoundref>
    <includes refid="usrp__block_8h" local="no">gnuradio/uhd/usrp_block.h</includes>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ac8e89fcb9cea511367952520b4a9dfa2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gr::uhd::usrp_block::usrp_block</definition>
        <argsstring>()</argsstring>
        <name>usrp_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="62" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a62d506ff6101c02274389569d97df060" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gr::uhd::usrp_block::usrp_block</definition>
        <argsstring>(const std::string &amp;name, gr::io_signature::sptr input_signature, gr::io_signature::sptr output_signature)</argsstring>
        <name>usrp_block</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classgr_1_1io__signature_1a7da6c549a1de5d27baaea042f8dd6dc1" kindref="member">gr::io_signature::sptr</ref></type>
          <declname>input_signature</declname>
        </param>
        <param>
          <type><ref refid="classgr_1_1io__signature_1a7da6c549a1de5d27baaea042f8dd6dc1" kindref="member">gr::io_signature::sptr</ref></type>
          <declname>output_signature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="63" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1af7967544d9d2883d7867408330b0ee82" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_subdev_spec</definition>
        <argsstring>(const std::string &amp;spec, size_t mboard=0)=0</argsstring>
        <name>set_subdev_spec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the frontend specification.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>the subdev spec markup string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a2a640e06290b4262ca6539de6a346b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string gr::uhd::usrp_block::get_subdev_spec</definition>
        <argsstring>(size_t mboard=0)=0</argsstring>
        <name>get_subdev_spec</name>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the frontend specification.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the frontend specification in use </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a073a49047f97dc74c06b8ed2a647633d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t gr::uhd::usrp_block::get_num_mboards</definition>
        <argsstring>()=0</argsstring>
        <name>get_num_mboards</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of motherboards in this configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1aec7f2c84fdca8d00c24ab64da4b802ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_samp_rate</definition>
        <argsstring>(double rate)=0</argsstring>
        <name>set_samp_rate</name>
        <param>
          <type>double</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the sample rate for this connection to the USRP.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>a new rate in Sps </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1af5fc38ee96e9e5b04350cfd46419cd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_samp_rate</definition>
        <argsstring>(void)=0</argsstring>
        <name>get_samp_rate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sample rate for this connection to the USRP. This is the actual sample rate and may differ from the rate set.</para><para><simplesect kind="return"><para>the actual rate in Sps </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a1ff8083ab54c12853d12f9f0309a62d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::meta_range_t</type>
        <definition>virtual ::uhd::meta_range_t gr::uhd::usrp_block::get_samp_rates</definition>
        <argsstring>(void)=0</argsstring>
        <name>get_samp_rates</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the possible sample rates for this connection.</para><para><simplesect kind="return"><para>a range of rates in Sps </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ae6a04f7001a10c4e39eef04050590f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::tune_result_t</type>
        <definition>virtual ::uhd::tune_result_t gr::uhd::usrp_block::set_center_freq</definition>
        <argsstring>(const ::uhd::tune_request_t tune_request, size_t chan=0)=0</argsstring>
        <name>set_center_freq</name>
        <param>
          <type>const ::uhd::tune_request_t</type>
          <declname>tune_request</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tune the selected channel to the desired center frequency.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tune_request</parametername>
</parameternamelist>
<parameterdescription>
<para>the tune request instructions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tune result with the actual frequencies </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1abee715a8a09943f37dde6c893258a58f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>::uhd::tune_result_t</type>
        <definition>::uhd::tune_result_t gr::uhd::usrp_block::set_center_freq</definition>
        <argsstring>(double freq, size_t chan=0)</argsstring>
        <name>set_center_freq</name>
        <param>
          <type>double</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tune the the selected channel to the desired center frequency.</para><para>This is a wrapper around <ref refid="classgr_1_1uhd_1_1usrp__block_1ae6a04f7001a10c4e39eef04050590f3d" kindref="member">set_center_freq()</ref> so that in this case, the user can pass a single frequency in the call instead of having to generate a tune_request_t object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired frequency in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tune result with the actual frequencies </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="135" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a89368e675b4cbce87c65a296d9ccb011" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_center_freq</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_center_freq</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the center frequency.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the frequency in Hz </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1af79045e2f19c0bd6e6d840420773e97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::freq_range_t</type>
        <definition>virtual ::uhd::freq_range_t gr::uhd::usrp_block::get_freq_range</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_freq_range</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the tunable frequency range.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the frequency range in Hz </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a81ee1048dbd04c8664f1ea95129203f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_gain</definition>
        <argsstring>(double gain, size_t chan=0)=0</argsstring>
        <name>set_gain</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the gain for the selected channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the gain in dB </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a21d8bdb0d51ac04daed10a5cee00581f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_gain</definition>
        <argsstring>(double gain, const std::string &amp;name, size_t chan=0)=0</argsstring>
        <name>set_gain</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the named gain on the dboard.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the gain in dB </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the gain stage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1acb55eecb7c3949a6940b284af35b5366" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_normalized_gain</definition>
        <argsstring>(double norm_gain, size_t chan=0)=0</argsstring>
        <name>set_normalized_gain</name>
        <param>
          <type>double</type>
          <declname>norm_gain</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the normalized gain.</para><para>The normalized gain is always in [0, 1], regardless of the device. 0 corresponds to minimum gain (usually 0 dB, but make sure to read the device notes in the UHD manual) and 1 corresponds to maximum gain. This will work for any UHD device. Use <ref refid="classgr_1_1uhd_1_1usrp__block_1a01c8c74c099f3bdcf2b60c17811ecf9c" kindref="member">get_gain()</ref> to see which dB value the normalized gain value corresponds to.</para><para>Note that it is not possible to specify a gain name for this function.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>runtime_error if <computeroutput>norm_gain</computeroutput> is not within the valid range.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>norm_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>the gain in fractions of the gain range (must be 0 &lt;= norm_gain &lt;= 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a01c8c74c099f3bdcf2b60c17811ecf9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_gain</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_gain</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the actual dboard gain setting.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual gain in dB </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1afdf1d8990c19e1a87da4b777df3ff286" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_gain</definition>
        <argsstring>(const std::string &amp;name, size_t chan=0)=0</argsstring>
        <name>get_gain</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the actual dboard gain setting of named stage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the gain stage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual gain in dB </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a61375076ede2973359e63ee5c344c9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_normalized_gain</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_normalized_gain</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the normalized gain.</para><para>The normalized gain is always in [0, 1], regardless of the device. See also <ref refid="classgr_1_1uhd_1_1usrp__block_1acb55eecb7c3949a6940b284af35b5366" kindref="member">set_normalized_gain()</ref>.</para><para>Note that it is not possible to specify a gain name for this function, the result is over the entire gain chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a756c14c66c5d9530f69e99afd6a4bb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_gain_names</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_gain_names</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the actual dboard gain setting of named stage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the actual gain in dB </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a722ef4baec2f767a92923c53296f63f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::gain_range_t</type>
        <definition>virtual ::uhd::gain_range_t gr::uhd::usrp_block::get_gain_range</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_gain_range</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the settable gain range.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the gain range in dB </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a9a7e9623b178c182b7bbeebdd49d8906" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::gain_range_t</type>
        <definition>virtual ::uhd::gain_range_t gr::uhd::usrp_block::get_gain_range</definition>
        <argsstring>(const std::string &amp;name, size_t chan=0)=0</argsstring>
        <name>get_gain_range</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the settable gain range.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the gain stage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the gain range in dB </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a3dd4bf829a3408fc6dda2e1251347451" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_antenna</definition>
        <argsstring>(const std::string &amp;ant, size_t chan=0)=0</argsstring>
        <name>set_antenna</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ant</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the antenna to use for a given channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ant</parametername>
</parameternamelist>
<parameterdescription>
<para>the antenna string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a57a71defced5326519d53bb097b6c6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string gr::uhd::usrp_block::get_antenna</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_antenna</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the antenna in use.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the antenna string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a0345e127d0d47eb04c3218b658e511b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_antennas</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_antennas</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a list of possible antennas on a given channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of antenna strings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ad6e22e5d5c6a118d3581641d7a3323b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_bandwidth</definition>
        <argsstring>(double bandwidth, size_t chan=0)=0</argsstring>
        <name>set_bandwidth</name>
        <param>
          <type>double</type>
          <declname>bandwidth</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the bandpass filter on the RF frontend.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bandwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the filter bandwidth in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1aa1d3bb7f11d0084cac2497e2da672d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_bandwidth</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_bandwidth</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the bandpass filter setting on the RF frontend.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bandwidth of the filter in Hz </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ac9028d873e01e4c5de2b4ef76549b500" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::freq_range_t</type>
        <definition>virtual ::uhd::freq_range_t gr::uhd::usrp_block::get_bandwidth_range</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_bandwidth_range</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the bandpass filter range of the RF frontend.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the range of the filter bandwidth in Hz </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a249fddbb3710046963c5a13fa5f47c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::sensor_value_t</type>
        <definition>virtual ::uhd::sensor_value_t gr::uhd::usrp_block::get_sensor</definition>
        <argsstring>(const std::string &amp;name, size_t chan=0)=0</argsstring>
        <name>get_sensor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an RF frontend sensor value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the sensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a sensor value object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a93d7ba19ddc5fbab42648e7759a3658f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_sensor_names</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_sensor_names</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a list of possible RF frontend sensor names. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chan</parametername>
</parameternamelist>
<parameterdescription>
<para>the channel index 0 to N-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of sensor names </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a2111cef63308c34f542aadf276d64f34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>::uhd::sensor_value_t</type>
        <definition>::uhd::sensor_value_t gr::uhd::usrp_block::get_dboard_sensor</definition>
        <argsstring>(const std::string &amp;name, size_t chan=0)</argsstring>
        <name>get_dboard_sensor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>DEPRECATED use get_sensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="316" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1adffea2cc34d5938861ab5e9e462cf197" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_dboard_sensor_names</definition>
        <argsstring>(size_t chan=0)</argsstring>
        <name>get_dboard_sensor_names</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>DEPRECATED use get_sensor_names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="323" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a419f5d60d9ca48d162c4001f79511c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::sensor_value_t</type>
        <definition>virtual ::uhd::sensor_value_t gr::uhd::usrp_block::get_mboard_sensor</definition>
        <argsstring>(const std::string &amp;name, size_t mboard=0)=0</argsstring>
        <name>get_mboard_sensor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a motherboard sensor value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the sensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a sensor value object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a0a78e8ff14af39eecf77249d0e97ad2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_mboard_sensor_names</definition>
        <argsstring>(size_t mboard=0)=0</argsstring>
        <name>get_mboard_sensor_names</name>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a list of possible motherboard sensor names.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of sensor names </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a53bf29fb3c4c870378ead9751baeb1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string gr::uhd::usrp_block::get_time_source</definition>
        <argsstring>(const size_t mboard)=0</argsstring>
        <name>get_time_source</name>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the currently set time source.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to get the config </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string representing the time source </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a62e4bd08fb39b56956144ae4292b080c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_time_sources</definition>
        <argsstring>(const size_t mboard)=0</argsstring>
        <name>get_time_sources</name>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a list of possible time sources.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to get the list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of strings for possible settings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a3bbb55b7fe3f71034a226b1c44fb85b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_clock_source</definition>
        <argsstring>(const std::string &amp;source, const size_t mboard=0)=0</argsstring>
        <name>set_clock_source</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the clock source for the usrp device.</para><para>This sets the source for a 10 MHz reference clock. Typical options for source: internal, external, MIMO.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing the clock source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to set the config </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a3b43de9978559c7e554a071d0181fb1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string gr::uhd::usrp_block::get_clock_source</definition>
        <argsstring>(const size_t mboard)=0</argsstring>
        <name>get_clock_source</name>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the currently set clock source.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to get the config </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string representing the clock source </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1adbc5f3aaabb72f6a46b1a7502317b3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_clock_sources</definition>
        <argsstring>(const size_t mboard)=0</argsstring>
        <name>get_clock_sources</name>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a list of possible clock sources.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to get the list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector of strings for possible settings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a86bbb5b0da5275a04b70e7da2cd14632" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::uhd::usrp_block::get_clock_rate</definition>
        <argsstring>(size_t mboard=0)=0</argsstring>
        <name>get_clock_rate</name>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the master clock rate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the clock rate in Hz </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a050219f726cb7cb6a6bf2a54c68ae54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_clock_rate</definition>
        <argsstring>(double rate, size_t mboard=0)=0</argsstring>
        <name>set_clock_rate</name>
        <param>
          <type>double</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the master clock rate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>the new rate in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1aa26791e5483d5491e50383f825d79263" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::time_spec_t</type>
        <definition>virtual ::uhd::time_spec_t gr::uhd::usrp_block::get_time_now</definition>
        <argsstring>(size_t mboard=0)=0</argsstring>
        <name>get_time_now</name>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current time registers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current usrp time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a147e4e1bf80082fd646d3376c02cf7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::time_spec_t</type>
        <definition>virtual ::uhd::time_spec_t gr::uhd::usrp_block::get_time_last_pps</definition>
        <argsstring>(size_t mboard=0)=0</argsstring>
        <name>get_time_last_pps</name>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the time when the last pps pulse occurred. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current usrp time </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a6600322668d82211649e32d1689d1cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_time_now</definition>
        <argsstring>(const ::uhd::time_spec_t &amp;time_spec, size_t mboard=0)=0</argsstring>
        <name>set_time_now</name>
        <param>
          <type>const ::uhd::time_spec_t &amp;</type>
          <declname>time_spec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the time registers immediately. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>the new time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a2a8fe19791f663f7aaa6725a6a3f54b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_time_next_pps</definition>
        <argsstring>(const ::uhd::time_spec_t &amp;time_spec)=0</argsstring>
        <name>set_time_next_pps</name>
        <param>
          <type>const ::uhd::time_spec_t &amp;</type>
          <declname>time_spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the time registers at the next pps. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>the new time </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a0db19ffad09cf57a69343d9cad8564e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_time_unknown_pps</definition>
        <argsstring>(const ::uhd::time_spec_t &amp;time_spec)=0</argsstring>
        <name>set_time_unknown_pps</name>
        <param>
          <type>const ::uhd::time_spec_t &amp;</type>
          <declname>time_spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sync the time registers with an unknown pps edge. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>the new time </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ae5876b4e9350ea4bfbc16fedfcb65741" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_command_time</definition>
        <argsstring>(const ::uhd::time_spec_t &amp;time_spec, size_t mboard=0)=0</argsstring>
        <name>set_command_time</name>
        <param>
          <type>const ::uhd::time_spec_t &amp;</type>
          <declname>time_spec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the time at which the control commands will take effect.</para><para>A timed command will back-pressure all subsequent timed commands, assuming that the subsequent commands occur within the time-window. If the time spec is late, the command will be activated upon arrival.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>the time at which the next command will activate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to set the config </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1afe647fabef73a5159ace22999d6030ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::clear_command_time</definition>
        <argsstring>(size_t mboard=0)=0</argsstring>
        <name>clear_command_time</name>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the command time so future commands are sent ASAP.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to set the config </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a75a2b22e632785076d9aef68f0557dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::usrp::dboard_iface::sptr</type>
        <definition>virtual ::uhd::usrp::dboard_iface::sptr gr::uhd::usrp_block::get_dboard_iface</definition>
        <argsstring>(size_t chan=0)=0</argsstring>
        <name>get_dboard_iface</name>
        <param>
          <type>size_t</type>
          <declname>chan</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get access to the underlying uhd dboard iface object.</para><para><simplesect kind="return"><para>the dboard_iface object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a4c3da4cab1096663ff720d3eb134927e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::usrp::multi_usrp::sptr</type>
        <definition>virtual ::uhd::usrp::multi_usrp::sptr gr::uhd::usrp_block::get_device</definition>
        <argsstring>(void)=0</argsstring>
        <name>get_device</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get access to the underlying uhd device object.</para><para>NOTE: This function is only available in C++. <simplesect kind="return"><para>the multi usrp device object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ada6bee686090387a100952c755429c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_user_register</definition>
        <argsstring>(const uint8_t addr, const uint32_t data, size_t mboard=0)=0</argsstring>
        <name>set_user_register</name>
        <param>
          <type>const uint8_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform write on the user configuration register bus. These only exist if the user has implemented custom setting registers in the device FPGA.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit register address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>32-bit register value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to set the user register </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a5bafa447cbc05f95b206a950f5f83bed" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_clock_config</definition>
        <argsstring>(const ::uhd::clock_config_t &amp;clock_config, size_t mboard=0)=0</argsstring>
        <name>set_clock_config</name>
        <param>
          <type>const ::uhd::clock_config_t &amp;</type>
          <declname>clock_config</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the clock configuration.</para><para>DEPRECATED for set_time/clock_source. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock_config</parametername>
</parameternamelist>
<parameterdescription>
<para>the new configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a8e7143eb310754be92ebf90599c4e1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_time_source</definition>
        <argsstring>(const std::string &amp;source, const size_t mboard=0)=0</argsstring>
        <name>set_time_source</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the time source for the USRP device.</para><para>This sets the method of time synchronization, typically a pulse per second or an encoded time. Typical options for source: external, MIMO. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing the time source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>which motherboard to set the config </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1abf9dfd3aefb33fc7eff2d8db4538142d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_stream_args</definition>
        <argsstring>(const ::uhd::stream_args_t &amp;stream_args)=0</argsstring>
        <name>set_stream_args</name>
        <param>
          <type>const ::<ref refid="structuhd_1_1stream__args__t" kindref="compound">uhd::stream_args_t</ref> &amp;</type>
          <declname>stream_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the stream args for this device.</para><para>This update will only take effect after a restart of the streaming, or before streaming and after construction. This will also delete the current streamer. Note you cannot change the I/O signature of this block using this function, or it will throw.</para><para>It is possible to leave the &apos;channels&apos; fields of <computeroutput>stream_args</computeroutput> unset. In this case, the previous channels field is used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream_args</parametername>
</parameternamelist>
<parameterdescription>
<para>New stream args. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if new settings are invalid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1ab09502e1c8c43a546616b9a998f137f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; gr::uhd::usrp_block::get_gpio_banks</definition>
        <argsstring>(const size_t mboard)=0</argsstring>
        <name>get_gpio_banks</name>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerate GPIO banks on the current device. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of string for each bank name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a643ecdd188565f6bfeca75a70e625ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::usrp_block::set_gpio_attr</definition>
        <argsstring>(const std::string &amp;bank, const std::string &amp;attr, const boost::uint32_t value, const boost::uint32_t mask=0xffffffff, const size_t mboard=0)=0</argsstring>
        <name>set_gpio_attr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const boost::uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const boost::uint32_t</type>
          <declname>mask</declname>
          <defval>0xffffffff</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a GPIO attribute on a particular GPIO bank. Possible attribute names:<itemizedlist>
<listitem><para>CTRL - 1 for ATR mode 0 for GPIO mode</para></listitem><listitem><para>DDR - 1 for output 0 for input</para></listitem><listitem><para>OUT - GPIO output level (not ATR mode)</para></listitem><listitem><para>ATR_0X - ATR idle state</para></listitem><listitem><para>ATR_RX - ATR receive only state</para></listitem><listitem><para>ATR_TX - ATR transmit only state</para></listitem><listitem><para>ATR_XX - ATR full duplex state <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of a GPIO bank </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of a GPIO attribute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value for this GPIO bank </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the bit mask to effect which pins are changed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1usrp__block_1a305e93151f12a18a1b03471d21e38f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>boost::uint32_t</type>
        <definition>virtual boost::uint32_t gr::uhd::usrp_block::get_gpio_attr</definition>
        <argsstring>(const std::string &amp;bank, const std::string &amp;attr, const size_t mboard=0)=0</argsstring>
        <name>get_gpio_attr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>mboard</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a GPIO attribute on a particular GPIO bank. Possible attribute names:<itemizedlist>
<listitem><para>CTRL - 1 for ATR mode 0 for GPIO mode</para></listitem><listitem><para>DDR - 1 for output 0 for input</para></listitem><listitem><para>OUT - GPIO output level (not ATR mode)</para></listitem><listitem><para>ATR_0X - ATR idle state</para></listitem><listitem><para>ATR_RX - ATR receive only state</para></listitem><listitem><para>ATR_TX - ATR transmit only state</para></listitem><listitem><para>ATR_XX - ATR full duplex state</para></listitem><listitem><para>READBACK - readback input GPIOs <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of a GPIO bank </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of a GPIO attribute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mboard</parametername>
</parameternamelist>
<parameterdescription>
<para>the motherboard index 0 to M-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value set for this attribute </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="577" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for USRP blocks.</para><para>Note that many of the functions defined here differ between Rx and Tx configurations. As an example, <ref refid="classgr_1_1uhd_1_1usrp__block_1ae6a04f7001a10c4e39eef04050590f3d" kindref="member">set_center_freq()</ref> will set the Rx frequency for a <ref refid="classgr_1_1uhd_1_1usrp__source" kindref="compound">usrp_source</ref> object, and the Tx frequency on a <ref refid="classgr_1_1uhd_1_1usrp__sink" kindref="compound">usrp_sink</ref> object. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="16042">
        <label>gr::msg_accepter</label>
        <link refid="classgr_1_1msg__accepter"/>
        <childnode refid="16043" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16039">
        <label>gr::sync_block</label>
        <link refid="classgr_1_1sync__block"/>
        <childnode refid="16040" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16041">
        <label>gr::basic_block</label>
        <link refid="classgr_1_1basic__block"/>
        <childnode refid="16042" relation="public-inheritance">
        </childnode>
        <childnode refid="16044" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16046">
        <label>gr::uhd::usrp_source</label>
        <link refid="classgr_1_1uhd_1_1usrp__source"/>
        <childnode refid="16038" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16043">
        <label>gr::messages::msg_accepter</label>
        <link refid="classgr_1_1messages_1_1msg__accepter"/>
      </node>
      <node id="16038">
        <label>gr::uhd::usrp_block</label>
        <link refid="classgr_1_1uhd_1_1usrp__block"/>
        <childnode refid="16039" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16040">
        <label>gr::block</label>
        <link refid="classgr_1_1block"/>
        <childnode refid="16041" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16044">
        <label>boost::enable_shared_from_this&lt; basic_block &gt;</label>
      </node>
      <node id="16045">
        <label>gr::uhd::usrp_sink</label>
        <link refid="classgr_1_1uhd_1_1usrp__sink"/>
        <childnode refid="16038" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="16051">
        <label>gr::msg_accepter</label>
        <link refid="classgr_1_1msg__accepter"/>
        <childnode refid="16052" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16055">
        <label>std::deque&lt; pmt::pmt_t &gt;</label>
      </node>
      <node id="16048">
        <label>gr::sync_block</label>
        <link refid="classgr_1_1sync__block"/>
        <childnode refid="16049" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16050">
        <label>gr::basic_block</label>
        <link refid="classgr_1_1basic__block"/>
        <childnode refid="16051" relation="public-inheritance">
        </childnode>
        <childnode refid="16053" relation="public-inheritance">
        </childnode>
        <childnode refid="16054" relation="usage">
          <edgelabel>msg_queue</edgelabel>
        </childnode>
        <childnode refid="16056" relation="usage">
          <edgelabel>d_symbol_alias</edgelabel>
          <edgelabel>d_name</edgelabel>
          <edgelabel>d_symbol_name</edgelabel>
        </childnode>
        <childnode refid="16058" relation="usage">
          <edgelabel>d_rpc_vars</edgelabel>
        </childnode>
      </node>
      <node id="16057">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="16054">
        <label>std::map&lt; pmt::pmt_t, msg_queue_t, pmt::comparator &gt;</label>
        <childnode refid="16055" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="16058">
        <label>std::vector&lt; boost::any &gt;</label>
      </node>
      <node id="16052">
        <label>gr::messages::msg_accepter</label>
        <link refid="classgr_1_1messages_1_1msg__accepter"/>
      </node>
      <node id="16059">
        <label>std::vector&lt; long &gt;</label>
      </node>
      <node id="16047">
        <label>gr::uhd::usrp_block</label>
        <link refid="classgr_1_1uhd_1_1usrp__block"/>
        <childnode refid="16048" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16049">
        <label>gr::block</label>
        <link refid="classgr_1_1block"/>
        <childnode refid="16050" relation="public-inheritance">
        </childnode>
        <childnode refid="16059" relation="usage">
          <edgelabel>d_min_output_buffer</edgelabel>
          <edgelabel>d_max_output_buffer</edgelabel>
        </childnode>
      </node>
      <node id="16053">
        <label>boost::enable_shared_from_this&lt; basic_block &gt;</label>
      </node>
      <node id="16056">
        <label>std::string</label>
        <childnode refid="16057" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" line="60" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-uhd/include/gnuradio/uhd/usrp_block.h" bodystart="59" bodyend="583"/>
    <listofallmembers>
      <member refid="classgr_1_1basic__block_1ab82376fe13f515cb904c0d2e9fec87b6" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>_post</name></member>
      <member refid="classgr_1_1block_1a099f578878243499d63846bbee61979a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>active_thread_priority</name></member>
      <member refid="classgr_1_1block_1a8b7cc51b9d289124d6843bb392f564fc" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>add_item_tag</name></member>
      <member refid="classgr_1_1block_1a8f0ee37749a77d3f40a5bb04233f6028" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>add_item_tag</name></member>
      <member refid="classgr_1_1basic__block_1a42d65e902f4886602ff3d5b124a71ef3" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>alias</name></member>
      <member refid="classgr_1_1basic__block_1a817f3a7595c32fbce00983977d0dd91e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>alias_pmt</name></member>
      <member refid="classgr_1_1basic__block_1aad58e9944ff205539855cd6116b03c55" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>alias_set</name></member>
      <member refid="classgr_1_1block_1a75313b29c3e68574bddf52ad7ab8c99a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>alignment</name></member>
      <member refid="classgr_1_1basic__block_1a6cc897729213ab4d2e3ade44c6942100" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>basic_block</name></member>
      <member refid="classgr_1_1basic__block_1a451b45483aec67682289f4cf94e53f74" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>basic_block</name></member>
      <member refid="classgr_1_1basic__block_1ac84f6979cb9e7650de9d9205901401aaab729ab9b0c860fece10ea1eddab6ce52" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>BLACK</name></member>
      <member refid="classgr_1_1block_1a624c3e070c3df38e5d11e4acd0f59b46" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>block</name></member>
      <member refid="classgr_1_1block_1aebbc2ed68daafc4de5ee0f5df21efe6e" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>block</name></member>
      <member refid="classgr_1_1basic__block_1aca13d6f083397aada5b44d0f349ce151" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>check_topology</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1afe647fabef73a5159ace22999d6030ca" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>clear_command_time</name></member>
      <member refid="classgr_1_1block_1af19867ade7536783777a5c5e91b69972" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>clear_finished</name></member>
      <member refid="classgr_1_1basic__block_1a6d7621bc17d7bd50b8b36d905487adcf" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>color</name></member>
      <member refid="classgr_1_1block_1a47193333ce3fe1536fb1663bf314f63d" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>consume</name></member>
      <member refid="classgr_1_1block_1a12ea5eba701e22a3d023d0ba7c6ee07c" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>consume_each</name></member>
      <member refid="classgr_1_1basic__block_1afc7a00e9e0ff69ceb903d3d6ff506473" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_color</name></member>
      <member refid="classgr_1_1block_1a41a376b09fb8bfc8f692edb5f733aaaa" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_debug_logger</name></member>
      <member refid="classgr_1_1basic__block_1a84d6b200bb5e268424e9e4630cb22e5a" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_input_signature</name></member>
      <member refid="classgr_1_1block_1a7061aa0e90b8cb1750b790f65549e0ae" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_logger</name></member>
      <member refid="classgr_1_1block_1ab740ebd7e5e88ab5ed7039db9f054db1" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_max_output_buffer</name></member>
      <member refid="classgr_1_1basic__block_1aefa8ebb27b9d86bef179e30e37f0dfc3" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_message_subscribers</name></member>
      <member refid="classgr_1_1block_1a4c393a6daebc82ddf6844a62f1c5e8ae" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_min_output_buffer</name></member>
      <member refid="classgr_1_1basic__block_1ad7da20e98a288f84597882e047df63f4" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_name</name></member>
      <member refid="classgr_1_1basic__block_1a84c091a90172b2eb6d617f6346bbce3f" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_output_signature</name></member>
      <member refid="classgr_1_1block_1ad72091916b86278b58b6d106876b3e8c" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_pmt_done</name></member>
      <member refid="classgr_1_1basic__block_1a8d54f7ea6ebf134e68e028294488354d" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_rpc_set</name></member>
      <member refid="classgr_1_1basic__block_1a4956e5631a93b2ef667a28564e71195b" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_rpc_vars</name></member>
      <member refid="classgr_1_1block_1aaf5b8dd7bba021af7bd93f39453f7482" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_setlock</name></member>
      <member refid="classgr_1_1basic__block_1a2de4ae58aaf6af63fe57ecf0e64dcbe0" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_symbol_alias</name></member>
      <member refid="classgr_1_1basic__block_1af6b5f158f329834b12d9b204cf62a10e" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_symbol_name</name></member>
      <member refid="classgr_1_1basic__block_1a7073674b5876118ae50cd7cc5646ad80" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_symbolic_id</name></member>
      <member refid="classgr_1_1block_1a2460fc9ff6df7f38a51dadba06b94904" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_system_port</name></member>
      <member refid="classgr_1_1basic__block_1a8afb0c354fb5fc2141fc7580361c2f00" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>d_unique_id</name></member>
      <member refid="classgr_1_1block_1acad5d6e62ea885cb77d19f72451581c2" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>declare_sample_delay</name></member>
      <member refid="classgr_1_1block_1aa7df9d4ebb09530cd3be2ad78da411b4" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>declare_sample_delay</name></member>
      <member refid="classgr_1_1basic__block_1accb52d0722546dbfda92e4ee699d8276" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>delete_head_blocking</name></member>
      <member refid="classgr_1_1basic__block_1af9e69c810222df1bccbd159d660eda06" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>delete_head_nowait</name></member>
      <member refid="classgr_1_1block_1a816ec687bdd384a6cf8493fd54019054" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>detail</name></member>
      <member refid="classgr_1_1basic__block_1aa0c8bc1d82de984c872fbaefc0ff954b" prot="protected" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>dispatch_msg</name></member>
      <member refid="classgr_1_1basic__block_1a0ea70146bf5ce65a8c20c0b7234063d9" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>empty_handled_p</name></member>
      <member refid="classgr_1_1basic__block_1a75b7c42c06430e9f5330f7462a5350a1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>empty_handled_p</name></member>
      <member refid="classgr_1_1basic__block_1aea4958dfb6cc37d60db6afaba91f6e6e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>empty_p</name></member>
      <member refid="classgr_1_1basic__block_1aecb5d318b3d3689e6f7f448d29a03032" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>empty_p</name></member>
      <member refid="classgr_1_1block_1a71d3cc9f05edecef8b7bda7f16580848" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>enable_update_rate</name></member>
      <member refid="classgr_1_1basic__block_1acffa27c6be8af72ae44773185687d49c" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>erase_msg</name></member>
      <member refid="classgr_1_1block_1a9bbf96f6a81d5c289934a68ef44dd1b4" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>expand_minmax_buffer</name></member>
      <member refid="classgr_1_1block_1a89242cb1ac9d2bf5e75f923745baa576" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>finished</name></member>
      <member refid="classgr_1_1block_1a13de80e93b11535dfa2d6168610b5f6a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>fixed_rate</name></member>
      <member refid="classgr_1_1sync__block_1a7e1560c84046771bf410d1f643f058af" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>fixed_rate_ninput_to_noutput</name></member>
      <member refid="classgr_1_1sync__block_1a67ecf7935b8a1c70a95ad22574eddeab" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>fixed_rate_noutput_to_ninput</name></member>
      <member refid="classgr_1_1sync__block_1a33b5a4849acaa3663ee14581a7b45186" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>forecast</name></member>
      <member refid="classgr_1_1sync__block_1a85ad1182f040814c0df45f985fa4dd69" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>general_work</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a57a71defced5326519d53bb097b6c6ab" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_antenna</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a0345e127d0d47eb04c3218b658e511b8" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_antennas</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1aa1d3bb7f11d0084cac2497e2da672d65" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_bandwidth</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ac9028d873e01e4c5de2b4ef76549b500" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_bandwidth_range</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a89368e675b4cbce87c65a296d9ccb011" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_center_freq</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a86bbb5b0da5275a04b70e7da2cd14632" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_clock_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a3b43de9978559c7e554a071d0181fb1f" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_clock_source</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1adbc5f3aaabb72f6a46b1a7502317b3a8" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_clock_sources</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a75a2b22e632785076d9aef68f0557dd0" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_dboard_iface</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a2111cef63308c34f542aadf276d64f34" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_dboard_sensor</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1adffea2cc34d5938861ab5e9e462cf197" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_dboard_sensor_names</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a4c3da4cab1096663ff720d3eb134927e" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_device</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1af79045e2f19c0bd6e6d840420773e97d" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_freq_range</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a01c8c74c099f3bdcf2b60c17811ecf9c" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gain</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1afdf1d8990c19e1a87da4b777df3ff286" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gain</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a756c14c66c5d9530f69e99afd6a4bb2d" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gain_names</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a722ef4baec2f767a92923c53296f63f9" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gain_range</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a9a7e9623b178c182b7bbeebdd49d8906" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gain_range</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a305e93151f12a18a1b03471d21e38f99" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gpio_attr</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ab09502e1c8c43a546616b9a998f137f1" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_gpio_banks</name></member>
      <member refid="classgr_1_1basic__block_1a33724cc678371b3713e13ed29217963e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_iterator</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a419f5d60d9ca48d162c4001f79511c85" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_mboard_sensor</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a0a78e8ff14af39eecf77249d0e97ad2c" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_mboard_sensor_names</name></member>
      <member refid="classgr_1_1basic__block_1ac2b4a15fdf99bfebc20cbafea7c2fcf4" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_msg_map</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a61375076ede2973359e63ee5c344c9ac" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_normalized_gain</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a073a49047f97dc74c06b8ed2a647633d" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_num_mboards</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1af5fc38ee96e9e5b04350cfd46419cd41" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_samp_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a1ff8083ab54c12853d12f9f0309a62d9" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_samp_rates</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a249fddbb3710046963c5a13fa5f47c2f" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_sensor</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a93d7ba19ddc5fbab42648e7759a3658f" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_sensor_names</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a2a640e06290b4262ca6539de6a346b53" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_subdev_spec</name></member>
      <member refid="classgr_1_1block_1aa0272555827fe26a1878e53ce4be092c" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_tags_in_range</name></member>
      <member refid="classgr_1_1block_1a83143d92b16b5bf93bf43a66a46bb60e" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_tags_in_range</name></member>
      <member refid="classgr_1_1block_1abf2cc497d68c4650be55765d0fe12291" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_tags_in_window</name></member>
      <member refid="classgr_1_1block_1a451b95d244e27e815eb3f9e56ea6ac32" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>get_tags_in_window</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a147e4e1bf80082fd646d3376c02cf7b7" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_time_last_pps</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1aa26791e5483d5491e50383f825d79263" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_time_now</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a53bf29fb3c4c870378ead9751baeb1bd" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_time_source</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a62e4bd08fb39b56956144ae4292b080c" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>get_time_sources</name></member>
      <member refid="classgr_1_1basic__block_1ac84f6979cb9e7650de9d9205901401aaa229412131f1cac62bf1cb3c63b12a19d" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>GREY</name></member>
      <member refid="classgr_1_1basic__block_1ac8bf058b47b635100945e20f3cc5d0b0" prot="protected" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>has_msg_handler</name></member>
      <member refid="classgr_1_1basic__block_1a8cdeb25c366bedbadf918b7f106dbf85" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>has_msg_port</name></member>
      <member refid="classgr_1_1block_1a71548fe7804c9b932f9bb9d770931af1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>history</name></member>
      <member refid="classgr_1_1basic__block_1adddacbed1278d56e03fa1d5b93b1d542" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>input_signature</name></member>
      <member refid="classgr_1_1basic__block_1acbf0d8127f9b1da8dcb327b29391812a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>insert_tail</name></member>
      <member refid="classgr_1_1block_1aac70128820e047e05993e4ec52b27c2a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>is_pc_rpc_set</name></member>
      <member refid="classgr_1_1basic__block_1a10bd994a51158fd3803377960d688795" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>is_rpc_set</name></member>
      <member refid="classgr_1_1block_1a4f67d984bc126aa4d254e62464525b79" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>is_set_max_noutput_items</name></member>
      <member refid="classgr_1_1block_1ae0ed1517975b23c556b71486ffb972de" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>is_unaligned</name></member>
      <member refid="classgr_1_1block_1af710a90819f19705f2d2ba1aa49d0172" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>max_noutput_items</name></member>
      <member refid="classgr_1_1block_1a5faeaab35423014dc59749d63cfe4cf1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>max_output_buffer</name></member>
      <member refid="classgr_1_1basic__block_1a8780d41bb2091c00a9637e15e872a7ce" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_is_hier</name></member>
      <member refid="classgr_1_1basic__block_1a5cc9ea399d0940de8440e028b7352ed7" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_is_hier_in</name></member>
      <member refid="classgr_1_1basic__block_1a218a3ea133d838c8344fb3914c54ba3a" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_is_hier_out</name></member>
      <member refid="classgr_1_1basic__block_1a485fa8f9fa04a1abcfe3f111d22e8e5f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_pub</name></member>
      <member refid="classgr_1_1basic__block_1a362b6de38292cca9c1d56439a6efad04" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_register_in</name></member>
      <member refid="classgr_1_1basic__block_1ac3047921885668943a13dabd35d5eda4" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_register_out</name></member>
      <member refid="classgr_1_1basic__block_1adddd339f229f55bd96229d7a7dd5cc8f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_sub</name></member>
      <member refid="classgr_1_1basic__block_1ad5496693b3c7c8be32529d695f83db1c" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_port_unsub</name></member>
      <member refid="classgr_1_1basic__block_1ae92faa0b6775de0100f6d202140403a2" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_ports_in</name></member>
      <member refid="classgr_1_1basic__block_1ad6351658056b5381f3803233cb75c928" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_ports_out</name></member>
      <member refid="classgr_1_1basic__block_1a15300c27e1a332bc7dcff6438ec6c080" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>message_subscribers</name></member>
      <member refid="classgr_1_1block_1a1da7d9e876b5ff5fde12492ce55e9a81" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>min_noutput_items</name></member>
      <member refid="classgr_1_1block_1ac28e42e36ef843b999cca3702981ccd7" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>min_output_buffer</name></member>
      <member refid="classgr_1_1msg__accepter_1ae25bb0b46019f4dbe2bdcecdf50dc755" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>msg_accepter</name></member>
      <member refid="classgr_1_1basic__block_1a68e92e54cda7a02697074705b9a7c08d" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>msg_queue</name></member>
      <member refid="classgr_1_1basic__block_1a676337e5495c9ac73c0a551971181477" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>name</name></member>
      <member refid="classgr_1_1block_1a2279d1eb421203bc5b0f100a6d5dc263" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>nitems_read</name></member>
      <member refid="classgr_1_1block_1a742128a481fcb9e43a3e0cd535a57f9e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>nitems_written</name></member>
      <member refid="classgr_1_1basic__block_1a4e3baf2d69f2a00871c89993e28b50ea" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>nmsgs</name></member>
      <member refid="classgr_1_1block_1a74745ea741b0aae938b003854f6043e0" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>no_pc_rpc</name></member>
      <member refid="classgr_1_1block_1adf235647d7ec77995751de89d94a22a6" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>notify_msg_neighbors</name></member>
      <member refid="classgr_1_1block_1a247e034ce4d624c1fee847f7779e90e1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>output_multiple</name></member>
      <member refid="classgr_1_1block_1a4ff8a6d59b8bd64817aebfbd28d78326" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>output_multiple_set</name></member>
      <member refid="classgr_1_1basic__block_1a348d5801eeff564e75f508aba22766bd" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>output_signature</name></member>
      <member refid="classgr_1_1block_1a4989096e4edf5e8171b65e3ce663af1e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_input_buffers_full</name></member>
      <member refid="classgr_1_1block_1a2dba88af74ee077751ebf5c11f470cbc" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_input_buffers_full</name></member>
      <member refid="classgr_1_1block_1a08e5deef4ebd0e6c2e11b839eaeadd9f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_input_buffers_full_avg</name></member>
      <member refid="classgr_1_1block_1aa4118c626e74926918a9bfd464b728cf" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_input_buffers_full_avg</name></member>
      <member refid="classgr_1_1block_1a00723a35c6e095da35608c8438e16cdf" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_input_buffers_full_var</name></member>
      <member refid="classgr_1_1block_1a2c211a608a7d4dc40ad63886d1944798" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_input_buffers_full_var</name></member>
      <member refid="classgr_1_1block_1af4a03de0d6609ca0e03b875250b7650c" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_noutput_items</name></member>
      <member refid="classgr_1_1block_1a3beb47de467a4a117b0c096f8511d3af" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_noutput_items_avg</name></member>
      <member refid="classgr_1_1block_1ae0725cd4ff4f5040a513c2a61355d434" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_noutput_items_var</name></member>
      <member refid="classgr_1_1block_1a84ef5905d40b507a2230c996d8857289" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_nproduced</name></member>
      <member refid="classgr_1_1block_1ad0b4960e100a088caefa99fb39f99a02" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_nproduced_avg</name></member>
      <member refid="classgr_1_1block_1a1a506f34b8b8c3f968dc0a8cb9da0650" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_nproduced_var</name></member>
      <member refid="classgr_1_1block_1ab125047ee56cf687e3475674a28d267f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_output_buffers_full</name></member>
      <member refid="classgr_1_1block_1a6ec7670b2a8d6d30113ab82683133b40" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_output_buffers_full</name></member>
      <member refid="classgr_1_1block_1a0ed8f2224fe1d0b27e17cd66723452a8" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_output_buffers_full_avg</name></member>
      <member refid="classgr_1_1block_1a0ddfee47fbd0d83826b8584ea7019b84" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_output_buffers_full_avg</name></member>
      <member refid="classgr_1_1block_1a2ad2a99ea794d44956d2878471e5976d" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_output_buffers_full_var</name></member>
      <member refid="classgr_1_1block_1affe32b7ec0d84efa56f5cc94723eb36f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_output_buffers_full_var</name></member>
      <member refid="classgr_1_1block_1a78a27917edcd3b32f10b2166f3362a68" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_throughput_avg</name></member>
      <member refid="classgr_1_1block_1ae8b89079d24a3216eb1b17d75ec5b8d8" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_work_time</name></member>
      <member refid="classgr_1_1block_1a2df6452cef2999e1b32458a5e542f948" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_work_time_avg</name></member>
      <member refid="classgr_1_1block_1a2c9fdd36be297e4b503ccd6290663367" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_work_time_total</name></member>
      <member refid="classgr_1_1block_1a4918e75c4d11a0b7222c9ba250313ebc" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>pc_work_time_var</name></member>
      <member refid="classgr_1_1msg__accepter_1a03b0afcc820d3454d29f0ada3b89e2fc" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>post</name></member>
      <member refid="classgr_1_1block_1a3b37bd70477161aa97d1e868ff2b20d9" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>processor_affinity</name></member>
      <member refid="classgr_1_1block_1aa5581727d057bdd8113f8b2a3fc5bd66" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>produce</name></member>
      <member refid="classgr_1_1block_1aa14aceb3623b74b66d235fbb237cec88" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>relative_rate</name></member>
      <member refid="classgr_1_1block_1a461f6cc92174e83b10c3ec5336036768" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>remove_item_tag</name></member>
      <member refid="classgr_1_1block_1a94906298cd5995a94172c53dbfbc77dd" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>remove_item_tag</name></member>
      <member refid="classgr_1_1block_1adb2d3602fe818cef1978090923667009" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>reset_perf_counters</name></member>
      <member refid="classgr_1_1basic__block_1ac349eee015757c75f8486b36ee08b106" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>rpc_set</name></member>
      <member refid="classgr_1_1block_1a8bdbb506d7253d841277292c712c1a28" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>sample_delay</name></member>
      <member refid="classgr_1_1block_1a49b49c097bffefe79f9d730539330edf" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_alignment</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a3dd4bf829a3408fc6dda2e1251347451" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_antenna</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ad6e22e5d5c6a118d3581641d7a3323b5" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_bandwidth</name></member>
      <member refid="classgr_1_1basic__block_1ad5251b68da76a9ce6bef105ef8136547" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_block_alias</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ae6a04f7001a10c4e39eef04050590f3d" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_center_freq</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1abee715a8a09943f37dde6c893258a58f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_center_freq</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a5bafa447cbc05f95b206a950f5f83bed" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_clock_config</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a050219f726cb7cb6a6bf2a54c68ae54b" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_clock_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a3bbb55b7fe3f71034a226b1c44fb85b6" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_clock_source</name></member>
      <member refid="classgr_1_1basic__block_1a2c4a58849217d8b76ba2d25c0dfd8bd0" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_color</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ae5876b4e9350ea4bfbc16fedfcb65741" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_command_time</name></member>
      <member refid="classgr_1_1block_1a776fbf15f5280bf8da74929b4ea8bb39" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_detail</name></member>
      <member refid="classgr_1_1block_1aa927cd4d5b8993122cf60dd556ffe62d" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_fixed_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a81ee1048dbd04c8664f1ea95129203f4" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_gain</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a21d8bdb0d51ac04daed10a5cee00581f" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_gain</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a643ecdd188565f6bfeca75a70e625ee9" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_gpio_attr</name></member>
      <member refid="classgr_1_1block_1ac2dac90e45498ad53a19544c01114136" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_history</name></member>
      <member refid="classgr_1_1basic__block_1a3f3f8f70bd0f0f2925b09bb75725c2b6" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_input_signature</name></member>
      <member refid="classgr_1_1block_1a0d33c4cc8b0131b9b8df41e3b46784b1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_is_unaligned</name></member>
      <member refid="classgr_1_1block_1ae2405dc2f6c84bb8e59aab56e4ce9d84" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_max_noutput_items</name></member>
      <member refid="classgr_1_1block_1a711fb69e35fb871e9a5e41d6a1f2afb1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_max_output_buffer</name></member>
      <member refid="classgr_1_1block_1a96d021628c08db3b138d3ee7c572ad90" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_max_output_buffer</name></member>
      <member refid="classgr_1_1block_1a65cfc579150dc4d10c6180d3365aa9a8" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_min_noutput_items</name></member>
      <member refid="classgr_1_1block_1a9d10e3f6747f91b215abe81b60a003d5" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_min_output_buffer</name></member>
      <member refid="classgr_1_1block_1a46a03397c78096a2f1c7f1b59f225f5b" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_min_output_buffer</name></member>
      <member refid="classgr_1_1basic__block_1a7fed11ec01538bfea999fb37687b43b4" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_msg_handler</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1acb55eecb7c3949a6940b284af35b5366" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_normalized_gain</name></member>
      <member refid="classgr_1_1block_1a63d67fd758b70c6f2d7b7d4edcec53b3" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_output_multiple</name></member>
      <member refid="classgr_1_1basic__block_1a7933b6bc4ad512774bbb40616cc31b4d" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_output_signature</name></member>
      <member refid="classgr_1_1block_1a05ad2ae50b0f7c922add44e74d9603b8" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>set_processor_affinity</name></member>
      <member refid="classgr_1_1block_1aff3003eea3517dd3e8d9a5297c1196b1" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_relative_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1aec7f2c84fdca8d00c24ab64da4b802ba" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_samp_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1abf9dfd3aefb33fc7eff2d8db4538142d" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_stream_args</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1af7967544d9d2883d7867408330b0ee82" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_subdev_spec</name></member>
      <member refid="classgr_1_1block_1a476e218927e426ac88c26431cbf086cd" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_tag_propagation_policy</name></member>
      <member refid="classgr_1_1block_1a83e0fd5c4db199e6e6f2fc75cdfb5dfa" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_thread_priority</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a2a8fe19791f663f7aaa6725a6a3f54b5" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_time_next_pps</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a6600322668d82211649e32d1689d1cab" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_time_now</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a8e7143eb310754be92ebf90599c4e1f1" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_time_source</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a0db19ffad09cf57a69343d9cad8564e9" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_time_unknown_pps</name></member>
      <member refid="classgr_1_1block_1a4d914fbc7814a682e25f5b2a40140d47" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>set_unaligned</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ada6bee686090387a100952c755429c19" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>set_user_register</name></member>
      <member refid="classgr_1_1block_1a9425064fac92607770042f472e140d7e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>setup_pc_rpc</name></member>
      <member refid="classgr_1_1basic__block_1a7f8bf6b9f28014657a6e8b5f25ca7802" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>setup_rpc</name></member>
      <member refid="classgr_1_1block_1a7f58745d1374b30a7b866406dc97850f" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>start</name></member>
      <member refid="classgr_1_1block_1a0863bc16f7c84adf4cddf5d53124450e" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>stop</name></member>
      <member refid="classgr_1_1basic__block_1ab5199f528de1872b055e632aedabef4e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>symbol_name</name></member>
      <member refid="classgr_1_1basic__block_1a0436f10fd13ce2a80be2aeae345e903a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>symbolic_id</name></member>
      <member refid="classgr_1_1sync__block_1a205473e9112aaffd3f92fcdcfa212ff4" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>sync_block</name></member>
      <member refid="classgr_1_1sync__block_1a1372aea30148feba7e744c58a88782e4" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>sync_block</name></member>
      <member refid="classgr_1_1block_1a4070b0462cce39d66b0c7c90ef2153d8" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>system_handler</name></member>
      <member refid="classgr_1_1block_1a4892196a19ef044a0eedeaa6566893c8" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>tag_propagation_policy</name></member>
      <member refid="classgr_1_1block_1abc40fd4d514724a5446a2b34b2352b4e" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>tag_propagation_policy_t</name></member>
      <member refid="classgr_1_1block_1a585b831aea5775730931d7fb9e6e8253" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>thread_priority</name></member>
      <member refid="classgr_1_1basic__block_1a84bf6924dfa0bb724caca46575669557" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>to_basic_block</name></member>
      <member refid="classgr_1_1block_1abc40fd4d514724a5446a2b34b2352b4ea5b3fd823d5f918e588008c0bc876e574" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>TPP_ALL_TO_ALL</name></member>
      <member refid="classgr_1_1block_1abc40fd4d514724a5446a2b34b2352b4eaadf6e1b257eee0590cc2b26161d08cdc" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>TPP_CUSTOM</name></member>
      <member refid="classgr_1_1block_1abc40fd4d514724a5446a2b34b2352b4ea2e3b11eb10000e0efab110c31a83e502" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>TPP_DONT</name></member>
      <member refid="classgr_1_1block_1abc40fd4d514724a5446a2b34b2352b4ea747127b6fb520f34be8ae3f951fdc53c" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>TPP_ONE_TO_ONE</name></member>
      <member refid="classgr_1_1block_1a53a85f2cd9f8ccef49eafad408069557" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>unaligned</name></member>
      <member refid="classgr_1_1basic__block_1a6e85f514a6c99d39593f0d250e787d2b" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>unique_id</name></member>
      <member refid="classgr_1_1block_1a460e8e5f15a4c5418ce3fc167c20a973" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>unset_max_noutput_items</name></member>
      <member refid="classgr_1_1block_1ac077773948a5f55b826dd638e1ed3863" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>unset_processor_affinity</name></member>
      <member refid="classgr_1_1block_1af32c62fff6b1285bf346bfda65e6fc3a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>update_rate</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1ac8e89fcb9cea511367952520b4a9dfa2" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>usrp_block</name></member>
      <member refid="classgr_1_1uhd_1_1usrp__block_1a62d506ff6101c02274389569d97df060" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>usrp_block</name></member>
      <member refid="classgr_1_1basic__block_1ac84f6979cb9e7650de9d9205901401aa" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>vcolor</name></member>
      <member refid="classgr_1_1basic__block_1ac84f6979cb9e7650de9d9205901401aaa42ae6a0efeb1be877a188c7ad4778f50" prot="protected" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>WHITE</name></member>
      <member refid="classgr_1_1sync__block_1a38942c5d8bee5232404ab71ada9a3956" prot="public" virt="pure-virtual"><scope>gr::uhd::usrp_block</scope><name>work</name></member>
      <member refid="classgr_1_1block_1a944affae11431e5064252da6c3eae1fca8cac307593cf1087803f28eee28ff45a" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>WORK_CALLED_PRODUCE</name></member>
      <member refid="classgr_1_1block_1a944affae11431e5064252da6c3eae1fca3e2d37c41af566875030fa1376c4203f" prot="public" virt="non-virtual"><scope>gr::uhd::usrp_block</scope><name>WORK_DONE</name></member>
      <member refid="classgr_1_1basic__block_1aa2006a298a9d9c60ea52c6a33e003b96" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>~basic_block</name></member>
      <member refid="classgr_1_1block_1a1db946ecc4ab437c609802d991e545cc" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>~block</name></member>
      <member refid="classgr_1_1msg__accepter_1a4a566e988c3b4ba11d568b340499e307" prot="public" virt="virtual"><scope>gr::uhd::usrp_block</scope><name>~msg_accepter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
