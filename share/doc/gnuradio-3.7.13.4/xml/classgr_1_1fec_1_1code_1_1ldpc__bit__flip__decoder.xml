<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>gr::fec::code::ldpc_bit_flip_decoder</compoundname>
    <basecompoundref refid="classgr_1_1fec_1_1generic__decoder" prot="public" virt="virtual">gr::fec::generic_decoder</basecompoundref>
    <includes refid="ldpc__bit__flip__decoder_8h" local="no">gnuradio/fec/ldpc_bit_flip_decoder.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder_1aa440d761375f873a722e0148ff24c617" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1fec_1_1generic__decoder_1a6f9aa291b0766faf1a7cbb4508d4a24d" kindref="member">generic_decoder::sptr</ref></type>
        <definition>static generic_decoder::sptr gr::fec::code::ldpc_bit_flip_decoder::make</definition>
        <argsstring>(const fec_mtrx_sptr mtrx_obj, unsigned int max_iter=100)</argsstring>
        <name>make</name>
        <param>
          <type>const fec_mtrx_sptr</type>
          <declname>mtrx_obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>max_iter</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>Build a bit flip decoding FEC API object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtrx_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The LDPC parity check matrix to use for decoding. This should be the same matrix used for encoding. Provide either a <ref refid="classgr_1_1fec_1_1code_1_1ldpc__H__matrix" kindref="compound">ldpc_H_matrix</ref> or a <ref refid="classgr_1_1fec_1_1code_1_1ldpc__G__matrix" kindref="compound">ldpc_G_matrix</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations to complete during the decoding algorithm. The default is 100 because this seemed to be sufficient during testing. May be increased for possibly better performance, but may slow things down. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-fec/include/gnuradio/fec/ldpc_bit_flip_decoder.h" line="69" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder_1afffb9552fe63aafdca0f57f26cdee55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool gr::fec::code::ldpc_bit_flip_decoder::set_frame_size</definition>
        <argsstring>(unsigned int frame_size)=0</argsstring>
        <name>set_frame_size</name>
        <reimplements refid="classgr_1_1fec_1_1generic__decoder_1a6da8f43baf97fab0691e80355f2fbb74">set_frame_size</reimplements>
        <param>
          <type>unsigned int</type>
          <declname>frame_size</declname>
        </param>
        <briefdescription>
<para>Sets the uncoded frame size to <computeroutput>frame_size</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the uncoded frame size to <computeroutput>frame_size</computeroutput>. If <computeroutput>frame_size</computeroutput> is greater than the value given to the constructor, the frame size will be capped by that initial value and this function will return false. Otherwise, it returns true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-fec/include/gnuradio/fec/ldpc_bit_flip_decoder.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder_1a15e99b7a45f9b7ecae02a8edf1f01d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double gr::fec::code::ldpc_bit_flip_decoder::rate</definition>
        <argsstring>()=0</argsstring>
        <name>rate</name>
        <reimplements refid="classgr_1_1fec_1_1generic__decoder_1a32869de99deaec078e6b3bdc01444795">rate</reimplements>
        <briefdescription>
<para>Returns the coding rate of this decoder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-fec/include/gnuradio/fec/ldpc_bit_flip_decoder.h" line="84" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LDPC bit flip decoding class. </para>    </briefdescription>
    <detaileddescription>
<para>A hard decision bit flip decoder class for decoding low density parity check (LDPC) codes. The decoder requires knowledge of the matrix used to create (encode) the codewords. The simple algorithm is:</para><para><orderedlist>
<listitem><para>Compute parity checks on all of the bits.</para></listitem><listitem><para>Flip the bit(s) associated with the most failed parity checks.</para></listitem><listitem><para>Check to see if new word is valid. ( <formula id="41">$\overline{x}$</formula> is a codeword if and only if <formula id="42">$\mathbf{H}\bar{x}^{T}=\overline{0}$</formula>.) If it is not valid, go back to step 1.</para></listitem><listitem><para>Repeat until valid codeword is found or the maximum number of iterations is reached. </para></listitem></orderedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="7829">
        <label>gr::fec::code::ldpc_bit_flip_decoder</label>
        <link refid="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder"/>
        <childnode refid="7830" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7830">
        <label>gr::fec::generic_decoder</label>
        <link refid="classgr_1_1fec_1_1generic__decoder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7831">
        <label>gr::fec::code::ldpc_bit_flip_decoder</label>
        <link refid="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder"/>
        <childnode refid="7832" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7834">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="7832">
        <label>gr::fec::generic_decoder</label>
        <link refid="classgr_1_1fec_1_1generic__decoder"/>
        <childnode refid="7833" relation="usage">
          <edgelabel>d_name</edgelabel>
        </childnode>
      </node>
      <node id="7833">
        <label>std::string</label>
        <childnode refid="7834" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/project/prefix/src/gnuradio/gr-fec/include/gnuradio/fec/ldpc_bit_flip_decoder.h" line="54" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-fec/include/gnuradio/fec/ldpc_bit_flip_decoder.h" bodystart="53" bodyend="86"/>
    <listofallmembers>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a9a6cbe6022c593cded3c00b929873855" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>alias</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a09d4e84d633630b77a47b80398c209ad" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>base_unique_id</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a29d043afec8a523972c67e17bf8f3f78" prot="protected" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>d_logger</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a96ed2f7bb7465e0df29a13b127ad9fd4" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>d_name</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a699ddfa2fc51343b3193149646bab208" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>generic_decoder</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1ab32bf0b94adb801b523001de32ee7dfc" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>generic_decoder</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1aeef6c573d354a4fe0c1ff5d78bafd485" prot="public" virt="pure-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>generic_work</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a9037426d33b865dda50055380f9b85c8" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_history</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1afaead9faf05cdb871e4c21f5f4dae90c" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_input_conversion</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a1f4ba1fe5a0e9b3508724b48400ff537" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_input_item_size</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a68f0c06cc9b57e421d4d755fc7eb60d5" prot="public" virt="pure-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_input_size</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a75ffb122f2891ee457be1874e198e836" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_iterations</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1ae9a6334b499359f97368569f9b50fbaf" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_output_conversion</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a558263fff172b7867ed96afccb93078f" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_output_item_size</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a0cad8d8b1977ebb9184b6c36ed73db9a" prot="public" virt="pure-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_output_size</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a7c46fd20d994c05ece2aa93dc8d3a926" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>get_shift</name></member>
      <member refid="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder_1aa440d761375f873a722e0148ff24c617" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>make</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a2ea0d9d63a13ef1bd22e6517a856b340" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>my_id</name></member>
      <member refid="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder_1a15e99b7a45f9b7ecae02a8edf1f01d25" prot="public" virt="pure-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>rate</name></member>
      <member refid="classgr_1_1fec_1_1code_1_1ldpc__bit__flip__decoder_1afffb9552fe63aafdca0f57f26cdee55c" prot="public" virt="pure-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>set_frame_size</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a6f9aa291b0766faf1a7cbb4508d4a24d" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>sptr</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a7480b06afbc530f4a524905deab8f70b" prot="public" virt="non-virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>unique_id</name></member>
      <member refid="classgr_1_1fec_1_1generic__decoder_1a36a7aeb512d578e53d6f984bfd380667" prot="public" virt="virtual"><scope>gr::fec::code::ldpc_bit_flip_decoder</scope><name>~generic_decoder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
