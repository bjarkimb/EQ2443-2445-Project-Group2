<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="page_prefs" kind="page">
    <compoundname>page_prefs</compoundname>
    <title>Configuration files</title>
    <detaileddescription>
<sect1 id="page_prefs_1prefs">
<title>Configuration / Preference Files</title>
<para>GNU Radio defines some of its basic behavior through a set of configuration files located in ${prefix}/etc/gnuradio/conf.d. Different components have different files listed in here for the various properties. These will be read once when starting a GNU Radio application, so updates during runtime will not affect them.</para><para>The configuration files use the following format:</para><para><programlisting><codeline><highlight class="normal">#<sp/>Stuff<sp/>from<sp/>section<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[section1]</highlight></codeline>
<codeline><highlight class="normal">var1<sp/>=<sp/>value1</highlight></codeline>
<codeline><highlight class="normal">var2<sp/>=<sp/>value2<sp/>#<sp/>value<sp/>of<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Stuff<sp/>from<sp/>section<sp/>2</highlight></codeline>
<codeline><highlight class="normal">[section2]</highlight></codeline>
<codeline><highlight class="normal">var3<sp/>=<sp/>value3</highlight></codeline>
</programlisting></para><para>In this file, the hash mark (&apos;#&apos;) indicates a comment and blank lines are ignored. Section labels are defined inside square brackets as a group distinguisher. All options must be associated with a section name. The options are listed one per line with the option name is given followed by an equals (&apos;=&apos;) sign and then the value.</para><para>All section and option names must not have white spaces. If a value must have white space, the it MUST be put inside quotes. Any quoted value will have its white space preserved and the quotes internally will be stripped. As an example, on Apple desktops, an output device of &quot;Display Audio&quot; is a possible output device and can be set as:</para><para><programlisting><codeline><highlight class="normal">[audio_osx]</highlight></codeline>
<codeline><highlight class="normal">default_output_device<sp/>=<sp/>&quot;Display<sp/>Audio&quot;</highlight></codeline>
</programlisting></para><para>The result will pass Display Audio to the audio setup.</para><para>The value of an option can be a string or number and retrieved through a few different interfaces. There is a single preference object created when GNU Radio is launched. In Python, you can get this by making a new variable:</para><para><programlisting><codeline><highlight class="normal">p<sp/>=<sp/>gr.prefs()</highlight></codeline>
</programlisting></para><para>Similarly, in C++, we get a reference to the object by explicitly calling for the singleton of the object:</para><para><programlisting><codeline><highlight class="normal">prefs<sp/>*p<sp/>=<sp/>prefs::singleton();</highlight></codeline>
</programlisting></para><para>The methods associated with this preferences object are (from class <ref refid="classgr_1_1prefs" kindref="compound">gr::prefs</ref>):</para><para><programlisting><codeline><highlight class="normal">bool<sp/>has_section(string<sp/>section)</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>has_option(string<sp/>section,<sp/>string<sp/>option)</highlight></codeline>
<codeline><highlight class="normal">string<sp/>get_string(string<sp/>section,<sp/>string<sp/>option,<sp/>string<sp/>default_val)</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>get_bool(string<sp/>section,<sp/>string<sp/>option,<sp/>bool<sp/>default_val)</highlight></codeline>
<codeline><highlight class="normal">long<sp/>get_long(string<sp/>section,<sp/>string<sp/>option,<sp/>long<sp/>default_val)</highlight></codeline>
<codeline><highlight class="normal">double<sp/>get_double(string<sp/>section,<sp/>string<sp/>option,<sp/>double<sp/>default_val)</highlight></codeline>
</programlisting></para><para>When setting a Boolean value, we can use 0, 1, &quot;True&quot;, &quot;true&quot;, &quot;False&quot;, &quot;false&quot;, &quot;On&quot;, &quot;on&quot;, &quot;Off&quot;, and &quot;off&quot;.</para><para>All configuration preferences in these files can also be overloaded by an environmental variable. The environmental variable is named based on the section and option name from the configuration file as:</para><para><programlisting><codeline><highlight class="normal">GR_CONF_&lt;SECTION&gt;_&lt;OPTION&gt;<sp/>=<sp/>&lt;value&gt;</highlight></codeline>
</programlisting></para><para>The &quot;GR_CONF_&quot; is a prefix to identify this as a GNU Radio configuration variable and the section and option names are in uppercase. The value is the same format that would be used in the config file itself. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
