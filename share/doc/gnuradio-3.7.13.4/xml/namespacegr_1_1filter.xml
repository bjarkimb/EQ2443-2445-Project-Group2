<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacegr_1_1filter" kind="namespace" language="C++">
    <compoundname>gr::filter</compoundname>
    <innerclass refid="classgr_1_1filter_1_1dc__blocker__cc" prot="public">gr::filter::dc_blocker_cc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1dc__blocker__ff" prot="public">gr::filter::dc_blocker_ff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fft__filter__ccc" prot="public">gr::filter::fft_filter_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fft__filter__ccf" prot="public">gr::filter::fft_filter_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fft__filter__fff" prot="public">gr::filter::fft_filter_fff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1filter__delay__fc" prot="public">gr::filter::filter_delay_fc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1filterbank__vcvcf" prot="public">gr::filter::filterbank_vcvcf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fir__filter__ccc" prot="public">gr::filter::fir_filter_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fir__filter__ccf" prot="public">gr::filter::fir_filter_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fir__filter__fcc" prot="public">gr::filter::fir_filter_fcc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fir__filter__fff" prot="public">gr::filter::fir_filter_fff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fir__filter__fsf" prot="public">gr::filter::fir_filter_fsf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fir__filter__scc" prot="public">gr::filter::fir_filter_scc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1firdes" prot="public">gr::filter::firdes</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fractional__interpolator__cc" prot="public">gr::filter::fractional_interpolator_cc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fractional__interpolator__ff" prot="public">gr::filter::fractional_interpolator_ff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fractional__resampler__cc" prot="public">gr::filter::fractional_resampler_cc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1fractional__resampler__ff" prot="public">gr::filter::fractional_resampler_ff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1freq__xlating__fir__filter__ccc" prot="public">gr::filter::freq_xlating_fir_filter_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1freq__xlating__fir__filter__ccf" prot="public">gr::filter::freq_xlating_fir_filter_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1freq__xlating__fir__filter__fcc" prot="public">gr::filter::freq_xlating_fir_filter_fcc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1freq__xlating__fir__filter__fcf" prot="public">gr::filter::freq_xlating_fir_filter_fcf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1freq__xlating__fir__filter__scc" prot="public">gr::filter::freq_xlating_fir_filter_scc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1freq__xlating__fir__filter__scf" prot="public">gr::filter::freq_xlating_fir_filter_scf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1hilbert__fc" prot="public">gr::filter::hilbert_fc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1iir__filter__ccc" prot="public">gr::filter::iir_filter_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1iir__filter__ccd" prot="public">gr::filter::iir_filter_ccd</innerclass>
    <innerclass refid="classgr_1_1filter_1_1iir__filter__ccf" prot="public">gr::filter::iir_filter_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1iir__filter__ccz" prot="public">gr::filter::iir_filter_ccz</innerclass>
    <innerclass refid="classgr_1_1filter_1_1iir__filter__ffd" prot="public">gr::filter::iir_filter_ffd</innerclass>
    <innerclass refid="classgr_1_1filter_1_1interp__fir__filter__ccc" prot="public">gr::filter::interp_fir_filter_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1interp__fir__filter__ccf" prot="public">gr::filter::interp_fir_filter_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1interp__fir__filter__fcc" prot="public">gr::filter::interp_fir_filter_fcc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1interp__fir__filter__fff" prot="public">gr::filter::interp_fir_filter_fff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1interp__fir__filter__fsf" prot="public">gr::filter::interp_fir_filter_fsf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1interp__fir__filter__scc" prot="public">gr::filter::interp_fir_filter_scc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1mmse__fir__interpolator__cc" prot="public">gr::filter::mmse_fir_interpolator_cc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1mmse__fir__interpolator__ff" prot="public">gr::filter::mmse_fir_interpolator_ff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1mmse__interp__differentiator__cc" prot="public">gr::filter::mmse_interp_differentiator_cc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1mmse__interp__differentiator__ff" prot="public">gr::filter::mmse_interp_differentiator_ff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__arb__resampler__ccc" prot="public">gr::filter::pfb_arb_resampler_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__arb__resampler__ccf" prot="public">gr::filter::pfb_arb_resampler_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__arb__resampler__fff" prot="public">gr::filter::pfb_arb_resampler_fff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__channelizer__ccf" prot="public">gr::filter::pfb_channelizer_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__decimator__ccf" prot="public">gr::filter::pfb_decimator_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__interpolator__ccf" prot="public">gr::filter::pfb_interpolator_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1pfb__synthesizer__ccf" prot="public">gr::filter::pfb_synthesizer_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1rational__resampler__base__ccc" prot="public">gr::filter::rational_resampler_base_ccc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1rational__resampler__base__ccf" prot="public">gr::filter::rational_resampler_base_ccf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1rational__resampler__base__fcc" prot="public">gr::filter::rational_resampler_base_fcc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1rational__resampler__base__fff" prot="public">gr::filter::rational_resampler_base_fff</innerclass>
    <innerclass refid="classgr_1_1filter_1_1rational__resampler__base__fsf" prot="public">gr::filter::rational_resampler_base_fsf</innerclass>
    <innerclass refid="classgr_1_1filter_1_1rational__resampler__base__scc" prot="public">gr::filter::rational_resampler_base_scc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1single__pole__iir" prot="public">gr::filter::single_pole_iir</innerclass>
    <innerclass refid="classgr_1_1filter_1_1single__pole__iir_3_01gr__complex_00_01i__type_00_01double_01_4" prot="public">gr::filter::single_pole_iir&lt; gr_complex, i_type, double &gt;</innerclass>
    <innerclass refid="classgr_1_1filter_1_1single__pole__iir__filter__cc" prot="public">gr::filter::single_pole_iir_filter_cc</innerclass>
    <innerclass refid="classgr_1_1filter_1_1single__pole__iir__filter__ff" prot="public">gr::filter::single_pole_iir_filter_ff</innerclass>
    <innernamespace refid="namespacegr_1_1filter_1_1kernel">gr::filter::kernel</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__filter__design_1gaf13aef1a29a91a0bfc06adeca11dd021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="gr-filter_2include_2gnuradio_2filter_2api_8h_1a7d33c890adb08fbd7c1c524f2c889357" kindref="member">FILTER_API</ref> std::vector&lt; double &gt;</type>
        <definition>FILTER_API std::vector&lt;double&gt; gr::filter::pm_remez</definition>
        <argsstring>(int order, const std::vector&lt; double &gt; &amp;bands, const std::vector&lt; double &gt; &amp;ampl, const std::vector&lt; double &gt; &amp;error_weight, const std::string filter_type=&quot;bandpass&quot;, int grid_density=16)</argsstring>
        <name>pm_remez</name>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>bands</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>ampl</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>error_weight</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>filter_type</declname>
          <defval>&quot;bandpass&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>grid_density</declname>
          <defval>16</defval>
        </param>
        <exceptions> throw (std::runtime_error)</exceptions>
        <briefdescription>
<para>Parks-McClellan FIR filter design using Remez algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>Calculates the optimal (in the Chebyshev/minimax sense) FIR filter inpulse response given a set of band edges, the desired response on those bands, and the weight given to the error in those bands.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>filter order (number of taps in the returned filter - 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bands</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency at the band edges [ b1 e1 b2 e2 b3 e3 ...] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ampl</parametername>
</parameternamelist>
<parameterdescription>
<para>desired amplitude at the band edges [ a(b1) a(e1) a(b2) a(e2) ...] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weighting applied to each band (usually 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_type</parametername>
</parameternamelist>
<parameterdescription>
<para>one of &quot;bandpass&quot;, &quot;hilbert&quot; or &quot;differentiator&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_density</parametername>
</parameternamelist>
<parameterdescription>
<para>determines how accurately the filter will be constructed. \ The minimum value is 16; higher values are slower to compute.</para></parameterdescription>
</parameteritem>
</parameterlist>
Frequency is in the range [0, 1], with 1 being the Nyquist frequency (Fs/2)</para><para><simplesect kind="return"><para>vector of computed taps</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if args are invalid or calculation fails to converge. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-filter/include/gnuradio/filter/pm_remez.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/project/prefix/src/gnuradio/build/gr-filter/include/gnuradio/filter/fir_filter_ccc.h" line="32" column="1"/>
  </compounddef>
</doxygen>
