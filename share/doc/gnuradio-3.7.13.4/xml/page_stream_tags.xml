<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="page_stream_tags" kind="page">
    <compoundname>page_stream_tags</compoundname>
    <title>Stream Tags</title>
    <detaileddescription>
<sect1 id="page_stream_tags_1stream_tags_introduction">
<title>Introduction</title>
<para>GNU Radio was originally a streaming system with no other mechanism to pass data between blocks. Streams of data are a model that work well for samples, bits, etc., but can lack for control and meta data.</para><para>Part of this is solved using the existing message passing interface, which allows blocks to subscribe to messages published by any other block in the flowgraph (see <ref refid="page_msg_passing" kindref="compound">Message Passing</ref>). The main drawback to the message passing system is that is works asynchronously, meaning that there is no guarantee when a message may arrive relative to the data stream.</para><para>Stream tags are an isosynchronous data stream that runs parallel to the main data stream. A stream <emphasis>tag</emphasis> is generated by a block&apos;s work function and from there on flows downstream alongside a particular sample, until it reaches a sink or is forced to stop propagating by another block.</para><para>Stream tags are defined for a specific item in the data stream and are formed as a key:value pair. The <emphasis>key</emphasis> identifies what the <emphasis>value</emphasis> represents while the value holds the data that the tag contains. Both <emphasis>key</emphasis> and <emphasis>value</emphasis> are PMTs (<ref refid="page_pmt" kindref="compound">Polymorphic Types</ref>) where the <emphasis>key</emphasis> is a PMT symbol while the <emphasis>value</emphasis> is any type of PMT and can therefore handle any data we wish to pass. An additional part of the tag is the <emphasis>srcid</emphasis>, which is a PMT symbol and is used to identify the block that created the tag (which is usually the block&apos;s alias).</para></sect1>
<sect1 id="page_stream_tags_1stream_tags_block_api_extensions">
<title>API Extensions to the gr::block</title>
<para>To enable the stream tags, we have extended the API of <ref refid="classgr_1_1block" kindref="compound">gr::block</ref> to understand <emphasis>absolute</emphasis> item numbers. In the data stream model, each block&apos;s work function is given a buffer in the data stream that is referenced from 0 to N-1. This is a <emphasis>relative</emphasis> offset into the data stream. The absolute reference starts from the beginning of the flowgraph and continues to count up with every item. Each input stream is associated with a concept of the &apos;number of items read&apos; and each output stream has a &apos;number of items written&apos;. These are retrieved during runtime using the two API calls:</para><para><programlisting><codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>nitems_read(unsigned<sp/>int<sp/>which_input);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>nitems_written(unsigned<sp/>int<sp/>which_output);</highlight></codeline>
</programlisting></para><para>Each tag is associated with some item in this absolute time scale that is calculated using these functions.</para><para>Like the rest of the data stream, the number of items read/written are only updated once during the call to work. So in a work function, nitems_read/written will refer to the state of the data stream at the start of the work function. We must therefore add to this value the current relative offset in the data stream. So if we are iterating <emphasis>i</emphasis> over all output items, we would write the stream tag to output ports at <emphasis>nitems_written(0)+i</emphasis> for the 0th output port.</para></sect1>
<sect1 id="page_stream_tags_1stream_tags_api">
<title>Stream Tags API</title>
<para>The stream tags API is split into two parts: adding tags to a stream, and getting tags from a stream. Note that the functions described below are only meant to be accessed within a call to general_work/work. While they can be called at other points in time by a block, the behavior outside of work is undefined without exact knowledge of the item counts in the buffers.</para><sect2 id="page_stream_tags_1stream_tags_add_item_tag">
<title>Adding a Tag to a Stream</title>
<para>We add a tag to a particular output stream of the block using:</para><para><itemizedlist>
<listitem><para><ref refid="classgr_1_1block_1a8b7cc51b9d289124d6843bb392f564fc" kindref="member">gr::block::add_item_tag</ref>: Adds an item tag to a particular output port using a <ref refid="structgr_1_1tag__t" kindref="compound">gr::tag_t</ref> data type or by specifying the tag values.</para></listitem>
</itemizedlist>
We can output them to multiple output streams if we want, but to do so means calling this function once for each port. This function can be provided with a <ref refid="structgr_1_1tag__t" kindref="compound">gr::tag_t</ref> data type, or each value of the tag can be explicitly given.</para><para>Again, a tag is defined as:</para><para><itemizedlist>
<listitem><para>offset: The offset, in absolute item time, of the tag in the data stream. </para></listitem>
<listitem><para>key: the PMT symbol identifying the type of tag. </para></listitem>
<listitem><para>value: the PMT holding the data of the tag. </para></listitem>
<listitem><para>srcid: (optional) the PMT symbol identifying the block which created the tag.</para></listitem>
</itemizedlist>
We can create a <ref refid="structgr_1_1tag__t" kindref="compound">gr::tag_t</ref> structure to hold all of the above information of a tag, which is probably the easiest/best way to do it. The <ref refid="structgr_1_1tag__t" kindref="compound">gr::tag_t</ref> struct is defined as having the same members as in the above list. To add a <ref refid="structgr_1_1tag__t" kindref="compound">gr::tag_t</ref> tag to a stream, use the function:</para><para><programlisting><codeline><highlight class="normal">void<sp/>add_item_tag(unsigned<sp/>int<sp/>which_output,<sp/>const<sp/>tag_t<sp/>&amp;tag);</highlight></codeline>
</programlisting></para><para>The secondary API allows us to create a tag by explicitly listing all of the tag information in the function call:</para><para><programlisting><codeline><highlight class="normal">void<sp/>add_item_tag(unsigned<sp/>int<sp/>which_output,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>abs_offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>pmt::pmt_t<sp/>&amp;key,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>pmt::pmt_t<sp/>&amp;value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>pmt::pmt_t<sp/>&amp;srcid=pmt::PMT_F);</highlight></codeline>
</programlisting></para></sect2>
<sect2 id="page_stream_tags_1stream_tags_get_item_tags">
<title>Getting tags from a Stream</title>
<para>To get tags from a particular input stream, we have two functions we can use:</para><para><itemizedlist>
<listitem><para><ref refid="classgr_1_1block_1aa0272555827fe26a1878e53ce4be092c" kindref="member">gr::block::get_tags_in_range</ref>: Gets all tags from a particular input port between a certain range of items (in absolute item time).</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para><ref refid="classgr_1_1block_1abf2cc497d68c4650be55765d0fe12291" kindref="member">gr::block::get_tags_in_window</ref>: Gets all tags from a particular input port between a certain range of items (in relative item time within the work function).</para></listitem>
</itemizedlist>
The difference between these functions is working in absolute item time versus relative item time. Both of these pass back vectors of <ref refid="structgr_1_1tag__t" kindref="compound">gr::tag_t</ref>, and they both allow specifying a particular key (as a PMT symbol) to filter against (or the fifth argument can be left out to search for all keys). Filtering for a certain key reduces the effort inside the work function for getting the right tag&apos;s data.</para><para>For example, this call just returns any tags between the given range of items:</para><para><programlisting><codeline><highlight class="normal">void<sp/>get_tags_in_range(std::vector&lt;tag_t&gt;<sp/>&amp;v,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>which_input,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>abs_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>abs_end);</highlight></codeline>
</programlisting></para><para>Adding a fifth argument to this function allows us to filter on the key <emphasis>key</emphasis>.</para><para><programlisting><codeline><highlight class="normal">void<sp/>get_tags_in_range(std::vector&lt;tag_t&gt;<sp/>&amp;v,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>which_input,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>abs_start,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>abs_end,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>pmt::pmt_t<sp/>&amp;key);</highlight></codeline>
</programlisting></para></sect2>
</sect1>
<sect1 id="page_stream_tags_1stream_tags_propagation">
<title>Tag Propagation</title>
<para>Tags are propagated downstream from block to block like the normal data streams. How tags are actually moved depends on a specific propagation policy. We defined three types of policies:</para><para><itemizedlist>
<listitem><para>All-to-All: all tags from any input port are replicated to all output ports </para></listitem>
<listitem><para>One-to-One: tags from input port <emphasis>i</emphasis> are only copied to output port <emphasis>i</emphasis> (depends on num inputs = num outputs). </para></listitem>
<listitem><para>Dont: Does not propagate tags. Tags are either stopped here or the work function recreates them in some manner.</para></listitem>
</itemizedlist>
The default behavior of a block is the &apos;All-to-All&apos; method of propagation.</para><para>To set a different propagation policy, use the function:</para><para><programlisting><codeline><highlight class="normal">void<sp/>set_tag_propagation_policy(tag_propagation_policy_t<sp/>p);</highlight></codeline>
</programlisting></para><para>See the <ref refid="classgr_1_1block_1abc40fd4d514724a5446a2b34b2352b4e" kindref="member">gr::block::tag_propagation_policy_t</ref> documentation for details on this enum type.</para><sect2 id="page_stream_tags_1stream_tags_rate_changes">
<title>Tag Propagation through Rate Changes</title>
<para>When a tag is propagated through a block that has a rate change, the item&apos;s offset in the data stream will change. The scheduler uses the block&apos;s <ref refid="classgr_1_1block_1aa14aceb3623b74b66d235fbb237cec88" kindref="member">gr::block::relative_rate</ref> concept to perform the update on the tag&apos;s offset value. The relative rate of a block determines the relationship between the input rate and output rate. Decimators that decimate by a factor of <emphasis>D</emphasis> have a relative rate of <emphasis>1/D</emphasis>.</para><para>Synchronous blocks (<ref refid="classgr_1_1sync__block" kindref="compound">gr::sync_block</ref>), decimators (<ref refid="classgr_1_1sync__decimator" kindref="compound">gr::sync_decimator</ref>), and interpolators (<ref refid="classgr_1_1sync__interpolator" kindref="compound">gr::sync_interpolator</ref>) all have pre-defined and well-understood relative rates. A standard <ref refid="classgr_1_1block" kindref="compound">gr::block</ref> has a default relative rate of 1.0, but this must be set if it does not work this way. Often, we use a <ref refid="classgr_1_1block" kindref="compound">gr::block</ref> because we have no pre-conceived notion of the number of input to output items. If it is important to pass tags through these blocks that respect the change in item value, we would have to use the TPP_DONT tag propagation policy and handle the propagation internally.</para><para>In no case is the value of the tag modified when propagating through a block. This becomes relevant when using <ref refid="page_tagged_stream_blocks" kindref="compound">Tagged Stream Blocks</ref>.</para></sect2>
</sect1>
<sect1 id="page_stream_tags_1stream_tags_issues">
<title>Notes on How to Use Tags</title>
<para>Tags can be very useful to an application, and their use is spreading. USRP sources generate tag information on the time, sample rate, and frequency of the board if anything changes. We have a meta data file source/sink (see <ref refid="page_metadata" kindref="compound">Metadata Information</ref>) that use tags to store information about the data stream. But there are things to think about when using tags in a block.</para><para>First, when tags are not being used, there is almost no effect on the scheduler. However, when we use tags, we add overhead by getting and extracting tags from a data stream. We also use overhead in propagating the tags. For each tag, each block must copy a vector of tags from the output port(s) of one block to the input port(s) of the next block(s). These copy operations can add up.</para><para>The key is to minimize the use of tags. Use them when and only when necessary and try to provide some control over how tags are generated to control their frequency. A good example is the USRP source, which generates a time tag. If it generated a tag with every sample, we would have thousands of tags per second, which would add a significant amount of overhead. This is because if we started at time <emphasis>t0</emphasis> at sample rate <emphasis>sr</emphasis>, then after <emphasis>N</emphasis> samples, we know that we are now at time <emphasis>t0 + N/sr</emphasis>. So continuously producing new tags adds no information.</para><para>The main issue we need to deal with in the above situation is when there is a discontinuity in the packets received from the USRP. Since we have no way of knowing in the flowgraph how many samples were potentially lost, we have lost track of the timing information. The USRP driver recognizes when packets have been dropped and uses this to queue another tag, which allows us to resync. Likewise, any point the sample rate or frequency changes, a new tag is issued. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
