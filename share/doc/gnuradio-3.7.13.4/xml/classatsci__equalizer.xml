<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classatsci__equalizer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>atsci_equalizer</compoundname>
    <derivedcompoundref refid="classatsci__equalizer__lms" prot="public" virt="non-virtual">atsci_equalizer_lms</derivedcompoundref>
    <derivedcompoundref refid="classatsci__equalizer__lms2" prot="public" virt="non-virtual">atsci_equalizer_lms2</derivedcompoundref>
    <derivedcompoundref refid="classatsci__equalizer__nop" prot="public" virt="non-virtual">atsci_equalizer_nop</derivedcompoundref>
    <includes refid="equalizer__impl_8h" local="no">gnuradio/atsc/equalizer_impl.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classatsci__equalizer_1a5ae39b673ad4513a99175c5b8831fe05" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool atsci_equalizer::d_locked_p</definition>
        <argsstring></argsstring>
        <name>d_locked_p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="40" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classatsci__equalizer_1af8d68a62bf9ff1e2f624d3df6bb70827" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int atsci_equalizer::d_offset_from_last_field_sync</definition>
        <argsstring></argsstring>
        <name>d_offset_from_last_field_sync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="47" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classatsci__equalizer_1a587ee8369298ee7a3844ce33bf59ee2a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int atsci_equalizer::d_current_field</definition>
        <argsstring></argsstring>
        <name>d_current_field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="49" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classatsci__equalizer_1ac0a5af23fc9f5fb75f75da695b085003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atsci_equalizer::atsci_equalizer</definition>
        <argsstring>()</argsstring>
        <name>atsci_equalizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a96543909a04bd0861632aa2b21388507" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual atsci_equalizer::~atsci_equalizer</definition>
        <argsstring>()</argsstring>
        <name>~atsci_equalizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a4961cb6f620eefa446c6bd569ce902f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; atsci_equalizer::taps</definition>
        <argsstring>()</argsstring>
        <name>taps</name>
        <reimplementedby refid="classatsci__equalizer__lms_1a009f9d514114585d7275b1e143437d0c">taps</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="58" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1ae1f4fea799066b5a030bf9cedd9f9141" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void atsci_equalizer::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplementedby refid="classatsci__equalizer__lms_1ada8cd96d000ac03af7b53276651bfab7">reset</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__lms2_1a343eccda6d3406e61d4e3f7a3f03584a">reset</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__nop_1a56b9b85bf850d88aa88fcefa44a3eb54">reset</reimplementedby>
        <briefdescription>
<para>reset state (e.g., on channel change) </para>        </briefdescription>
        <detaileddescription>
<para>Note, subclasses must invoke the superclass&apos;s method too! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a652624aa36e1a9973e63fa22e05fceb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void atsci_equalizer::filter</definition>
        <argsstring>(const float *input_samples, const atsc::syminfo *input_tags, float *output_samples, int nsamples)</argsstring>
        <name>filter</name>
        <param>
          <type>const float *</type>
          <declname>input_samples</declname>
        </param>
        <param>
          <type>const <ref refid="structatsc_1_1syminfo" kindref="compound">atsc::syminfo</ref> *</type>
          <declname>input_tags</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output_samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsamples</declname>
        </param>
        <briefdescription>
<para>produce <computeroutput>nsamples</computeroutput> of output from given inputs and tags </para>        </briefdescription>
        <detaileddescription>
<para>This is the main entry point. It examines the input_tags and local state and invokes the appropriate virtual function to handle each sub-segment of the input data.</para><para><computeroutput>input_samples</computeroutput> must have (nsamples + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1) valid entries. input_samples[0] .. input_samples[nsamples - 1 + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1] are referenced to compute the output values.</para><para><computeroutput>input_tags</computeroutput> must have nsamples valid entries. input_tags[0] .. input_tags[nsamples - 1] are referenced to compute the output values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int atsci_equalizer::ntaps</definition>
        <argsstring>() const =0</argsstring>
        <name>ntaps</name>
        <reimplementedby refid="classatsci__equalizer__lms_1a175be27cd2a7066c00ef70e73a4d8a21">ntaps</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__lms2_1ade874736b434c36c3e1916c737208406">ntaps</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__nop_1a0940bb621986b9827d24200e19b0d5dd">ntaps</reimplementedby>
        <briefdescription>
<para>how much history the input data stream requires. </para>        </briefdescription>
        <detaileddescription>
<para>This must return a value &gt;= 1. Think of this as the number of samples you need to look at to compute a single output sample. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a3d1ec7e9d8d647af683be66334658b9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int atsci_equalizer::npretaps</definition>
        <argsstring>() const =0</argsstring>
        <name>npretaps</name>
        <reimplementedby refid="classatsci__equalizer__lms_1a22680b8926f2ce6bd5c5fb38e25de25b">npretaps</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__lms2_1ae9e1dd9e384136c7eae624428a79a4a6">npretaps</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__nop_1aea25eeb6ebfbebb2f2faa891a5cd2610">npretaps</reimplementedby>
        <briefdescription>
<para>how many taps are &quot;in the future&quot;. </para>        </briefdescription>
        <detaileddescription>
<para>This allows us to handle what the ATSC folks call &quot;pre-ghosts&quot;. What it really does is allow the caller to jack with the offset between the tags and the data so that everything magically works out.</para><para>npretaps () must return a value between 0 and <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1.</para><para>If npretaps () returns 0, this means that the equalizer will only handle multipath &quot;in the past.&quot; I suspect that a good value would be something like 15% - 20% of ntaps (). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classatsci__equalizer_1af41b4d5184df08f6df672752d1d3c9d3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void atsci_equalizer::filter_normal</definition>
        <argsstring>(const float *input_samples, float *output_samples, int nsamples)=0</argsstring>
        <name>filter_normal</name>
        <reimplementedby refid="classatsci__equalizer__lms2_1a4733555f4c5f69d0619ccdad90c9ff0f">filter_normal</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__nop_1a11feb6978266a24cc44059e3b4998b89">filter_normal</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__lms_1af29b102348176dc728260eb52d4954d4">filter_normal</reimplementedby>
        <param>
          <type>const float *</type>
          <declname>input_samples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output_samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsamples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input range is known NOT TO CONTAIN data segment syncs or field syncs. This should be the fast path. In the non decicion directed case, this just runs the input through the filter without adapting it.</para><para><computeroutput>input_samples</computeroutput> has (nsamples + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1) valid entries. input_samples[0] .. input_samples[nsamples - 1 + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1] may be referenced to compute the output values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a1826a36e71cd5b23b37212a382363a59" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void atsci_equalizer::filter_data_seg_sync</definition>
        <argsstring>(const float *input_samples, float *output_samples, int nsamples, int offset)=0</argsstring>
        <name>filter_data_seg_sync</name>
        <reimplementedby refid="classatsci__equalizer__lms2_1a2b010d57187868eb372bb5e0903be619">filter_data_seg_sync</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__nop_1a2d21e46afdfcd4dd3ff753d104e51a6f">filter_data_seg_sync</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__lms_1a4d8b1c86277efdb78890150b564b71ef">filter_data_seg_sync</reimplementedby>
        <param>
          <type>const float *</type>
          <declname>input_samples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output_samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsamples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input range is known to consist of only a data segment sync or a portion of a data segment sync. <computeroutput>nsamples</computeroutput> will be in [1,4]. <computeroutput>offset</computeroutput> will be in [0,3]. <computeroutput>offset</computeroutput> is the offset of the input from the beginning of the data segment sync pattern.</para><para><computeroutput>input_samples</computeroutput> has (nsamples + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1) valid entries. input_samples[0] .. input_samples[nsamples - 1 + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1] may be referenced to compute the output values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classatsci__equalizer_1a4731ead6a02b3ebba75f3e0b70eefe55" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void atsci_equalizer::filter_field_sync</definition>
        <argsstring>(const float *input_samples, float *output_samples, int nsamples, int offset, int which_field)=0</argsstring>
        <name>filter_field_sync</name>
        <reimplementedby refid="classatsci__equalizer__lms2_1a8545c2e4fc07d4a7ec4d4ed403108cce">filter_field_sync</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__nop_1aabe199fee2a80db95cf5437a68c19901">filter_field_sync</reimplementedby>
        <reimplementedby refid="classatsci__equalizer__lms_1a16f3f405c5eee8cd233d87e6ee67748b">filter_field_sync</reimplementedby>
        <param>
          <type>const float *</type>
          <declname>input_samples</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output_samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsamples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>which_field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input range is known to consist of only a field sync segment or a portion of a field sync segment. <computeroutput>nsamples</computeroutput> will be in [1,832]. <computeroutput>offset</computeroutput> will be in [0,831]. <computeroutput>offset</computeroutput> is the offset of the input from the beginning of the data segment sync pattern. We consider the 4 symbols of the immediately preceding data segment sync to be the first symbols of the field sync segment. <computeroutput>which_field</computeroutput> is in [0,1] and specifies which field (duh).</para><para><computeroutput>input_samples</computeroutput> has (nsamples + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1) valid entries. input_samples[0] .. input_samples[nsamples - 1 + <ref refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" kindref="member">ntaps()</ref> - 1] may be referenced to compute the output values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>abstract base class for ATSC equalizer </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1461">
        <label>atsci_equalizer_lms2</label>
        <link refid="classatsci__equalizer__lms2"/>
        <childnode refid="1459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1460">
        <label>atsci_equalizer_lms</label>
        <link refid="classatsci__equalizer__lms"/>
        <childnode refid="1459" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1459">
        <label>atsci_equalizer</label>
        <link refid="classatsci__equalizer"/>
      </node>
      <node id="1462">
        <label>atsci_equalizer_nop</label>
        <link refid="classatsci__equalizer__nop"/>
        <childnode refid="1459" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" line="33" column="1" bodyfile="/home/project/prefix/src/gnuradio/gr-atsc/include/gnuradio/atsc/equalizer_impl.h" bodystart="33" bodyend="166"/>
    <listofallmembers>
      <member refid="classatsci__equalizer_1ac0a5af23fc9f5fb75f75da695b085003" prot="public" virt="non-virtual"><scope>atsci_equalizer</scope><name>atsci_equalizer</name></member>
      <member refid="classatsci__equalizer_1a587ee8369298ee7a3844ce33bf59ee2a" prot="private" virt="non-virtual"><scope>atsci_equalizer</scope><name>d_current_field</name></member>
      <member refid="classatsci__equalizer_1a5ae39b673ad4513a99175c5b8831fe05" prot="private" virt="non-virtual"><scope>atsci_equalizer</scope><name>d_locked_p</name></member>
      <member refid="classatsci__equalizer_1af8d68a62bf9ff1e2f624d3df6bb70827" prot="private" virt="non-virtual"><scope>atsci_equalizer</scope><name>d_offset_from_last_field_sync</name></member>
      <member refid="classatsci__equalizer_1a652624aa36e1a9973e63fa22e05fceb4" prot="public" virt="virtual"><scope>atsci_equalizer</scope><name>filter</name></member>
      <member refid="classatsci__equalizer_1a1826a36e71cd5b23b37212a382363a59" prot="protected" virt="pure-virtual"><scope>atsci_equalizer</scope><name>filter_data_seg_sync</name></member>
      <member refid="classatsci__equalizer_1a4731ead6a02b3ebba75f3e0b70eefe55" prot="protected" virt="pure-virtual"><scope>atsci_equalizer</scope><name>filter_field_sync</name></member>
      <member refid="classatsci__equalizer_1af41b4d5184df08f6df672752d1d3c9d3" prot="protected" virt="pure-virtual"><scope>atsci_equalizer</scope><name>filter_normal</name></member>
      <member refid="classatsci__equalizer_1a3d1ec7e9d8d647af683be66334658b9a" prot="public" virt="pure-virtual"><scope>atsci_equalizer</scope><name>npretaps</name></member>
      <member refid="classatsci__equalizer_1a8db8cff0e3739aa59911eeb059913d9b" prot="public" virt="pure-virtual"><scope>atsci_equalizer</scope><name>ntaps</name></member>
      <member refid="classatsci__equalizer_1ae1f4fea799066b5a030bf9cedd9f9141" prot="public" virt="virtual"><scope>atsci_equalizer</scope><name>reset</name></member>
      <member refid="classatsci__equalizer_1a4961cb6f620eefa446c6bd569ce902f9" prot="public" virt="virtual"><scope>atsci_equalizer</scope><name>taps</name></member>
      <member refid="classatsci__equalizer_1a96543909a04bd0861632aa2b21388507" prot="public" virt="virtual"><scope>atsci_equalizer</scope><name>~atsci_equalizer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
