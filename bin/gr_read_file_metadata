#!/usr/bin/python
#
# Copyright 2012 Free Software Foundation, Inc.
#
# This file is part of GNU Radio
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

import sys
import time
from optparse import OptionParser

import pmt
from gnuradio.blocks import parse_file_metadata

def backtrace_step(handle,nread):
	#print(nread," B nread at beginning")
	hdr_start = handle.tell()
	#print(hdr_start," B position at beginning")
	header_str = handle.read(parse_file_metadata.HEADER_LENGTH)
## Think if we need to put conditional break here
	if(len(header_str) == 0):
		return nread
	try:
		header = pmt.deserialize_str(header_str)
		info = parse_file_metadata.parse_header(header, False)
	except RuntimeError:
		sys.stderr.write("Could not deserialize header: invalid or corrupt data file.\n")
		#print('Prev packet could not be decoded!')
		time.sleep(0.1)
		#sys.exit(1)
		return nread

	if(info["extra_len"] > 0):
		extra_str = handle.read(info["extra_len"])
		if(len(extra_str) != info["extra_len"]):
			#print('Prev packet extras data incomplete!')
			time.sleep(0.1)
			return nread

		try:
			extra = pmt.deserialize_str(extra_str)
			extra_info = parse_file_metadata.parse_extra_dict(extra, info, False)
		except RuntimeError:
			sys.stderr.write("Could not deserialize extras: invalid or corrupt data file.\n")
			#print('Prev packet extras could not be decoded!')
			time.sleep(0.1)              
			#sys.exit(1)
			return nread

	#print('Updating nread after backtrace')
	nread_New = nread + parse_file_metadata.HEADER_LENGTH + info["extra_len"]
	nread_New += info['nbytes']
	return nread_New

def main(filename, detached=False):
	handle = open(filename, "rb")

	nheaders = 0
	nread = 0
	nread_ = 0
	while(True):
		# read out next header bytes
	#print(nread," nread at beginning")
	#print(nread_," nread_ at beginning")
		hdr_start = handle.tell()
	#print(hdr_start," position at beginning")
		header_str = handle.read(parse_file_metadata.HEADER_LENGTH)
	#print(len(header_str), parse_file_metadata.HEADER_LENGTH)
		if(len(header_str) != parse_file_metadata.HEADER_LENGTH):
	#------ Uncomment next line for offline mode, comment for online------------------
			#break
	#---------------------------------------------------------------------------------
			#print('haha, going back one step!')
			time.sleep(0.1)
			handle.seek(nread_, 0)
			nread = backtrace_step(handle, nread_)
			#print(nread, 'is the new nread')
			handle.seek(nread, 0)
			continue

		# Convert from string to PMT (should be a dictionary)
		try:
			header = pmt.deserialize_str(header_str)
			print "HEADER {0}".format(nheaders)
			info = parse_file_metadata.parse_header(header, True)
		except RuntimeError:
			sys.stderr.write("Could not deserialize header: invalid or corrupt data file.\n")
	#------ Uncomment next line for offline mode, comment for online------------------
				#sys.exit(1)
	###-------------------------------------------------------------------------------
			#print('huhu, going back one step!')
			time.sleep(0.1)
			handle.seek(nread_, 0)
			nread = backtrace_step(handle, nread_)
			#print(nread, 'is the new nread')
			handle.seek(nread, 0)
			continue


		if(info["extra_len"] > 0):
			extra_str = handle.read(info["extra_len"])
			if(len(extra_str) != info["extra_len"]):
				#print('hihi, going back one step!')
				time.sleep(0.1)
				handle.seek(nread_, 0)
				nread = backtrace_step(handle, nread_)
				#print(nread, 'is the new nread')
				handle.seek(nread, 0)
				continue

			try:
				extra = pmt.deserialize_str(extra_str)
				print "\nExtra Header:"
				extra_info = parse_file_metadata.parse_extra_dict(extra, info, True)
			except RuntimeError:
				sys.stderr.write("Could not deserialize extras: invalid or corrupt data file.\n")
				#print('huhu, going back one step!')
				time.sleep(0.1)
				handle.seek(nread_, 0)
				nread = backtrace_step(handle, nread_)
				#print(nread, 'is the new nread')
				handle.seek(nread, 0)
				continue            
				#sys.exit(1)

			

		nheaders += 1
		#print(nread," before update")
		nread_ = nread
		nread += parse_file_metadata.HEADER_LENGTH + info["extra_len"]
		if(not detached):
			nread += info['nbytes']
		#print(nread," after update")
		handle.seek(nread, 0)
		print "\n\n"

if __name__ == "__main__":
	usage="%prog: [options] filename"
	description = "Read in a GNU Radio file with meta data, extracts the header and prints it."

	parser = OptionParser(conflict_handler="resolve",
						  usage=usage, description=description)
	parser.add_option("-D", "--detached", action="store_true", default=False,
					  help="Used if header is detached.")
	(options, args) = parser.parse_args ()

	if(len(args) < 1):
		sys.stderr.write("No filename given\n")
		sys.exit(1)

	filename = args[0]
	main(filename, options.detached)
